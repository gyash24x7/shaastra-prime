// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update
// it. For more information, please read the docs:
// https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `enum AccessLevel {
  COORD
  CORE
  COCAS
  COCAD
  HEAD
}

type AggregateChannel {
  count: Int!
}

type AggregateDepartment {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Channel {
  id: ID!
  name: String!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  createdAt: DateTime!
}

type ChannelConnection {
  pageInfo: PageInfo!
  edges: [ChannelEdge]!
  aggregate: AggregateChannel!
}

input ChannelCreateInput {
  id: ID
  name: String!
  members: UserCreateManyWithoutChannelsInput
  messages: MessageCreateManyWithoutChannelInput
}

input ChannelCreateManyWithoutMembersInput {
  create: [ChannelCreateWithoutMembersInput!]
  connect: [ChannelWhereUniqueInput!]
}

input ChannelCreateOneWithoutMessagesInput {
  create: ChannelCreateWithoutMessagesInput
  connect: ChannelWhereUniqueInput
}

input ChannelCreateWithoutMembersInput {
  id: ID
  name: String!
  messages: MessageCreateManyWithoutChannelInput
}

input ChannelCreateWithoutMessagesInput {
  id: ID
  name: String!
  members: UserCreateManyWithoutChannelsInput
}

type ChannelEdge {
  node: Channel!
  cursor: String!
}

enum ChannelOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChannelPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
}

input ChannelScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ChannelScalarWhereInput!]
  OR: [ChannelScalarWhereInput!]
  NOT: [ChannelScalarWhereInput!]
}

type ChannelSubscriptionPayload {
  mutation: MutationType!
  node: Channel
  updatedFields: [String!]
  previousValues: ChannelPreviousValues
}

input ChannelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChannelWhereInput
  AND: [ChannelSubscriptionWhereInput!]
  OR: [ChannelSubscriptionWhereInput!]
  NOT: [ChannelSubscriptionWhereInput!]
}

input ChannelUpdateInput {
  name: String
  members: UserUpdateManyWithoutChannelsInput
  messages: MessageUpdateManyWithoutChannelInput
}

input ChannelUpdateManyDataInput {
  name: String
}

input ChannelUpdateManyMutationInput {
  name: String
}

input ChannelUpdateManyWithoutMembersInput {
  create: [ChannelCreateWithoutMembersInput!]
  delete: [ChannelWhereUniqueInput!]
  connect: [ChannelWhereUniqueInput!]
  set: [ChannelWhereUniqueInput!]
  disconnect: [ChannelWhereUniqueInput!]
  update: [ChannelUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [ChannelUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [ChannelScalarWhereInput!]
  updateMany: [ChannelUpdateManyWithWhereNestedInput!]
}

input ChannelUpdateManyWithWhereNestedInput {
  where: ChannelScalarWhereInput!
  data: ChannelUpdateManyDataInput!
}

input ChannelUpdateOneRequiredWithoutMessagesInput {
  create: ChannelCreateWithoutMessagesInput
  update: ChannelUpdateWithoutMessagesDataInput
  upsert: ChannelUpsertWithoutMessagesInput
  connect: ChannelWhereUniqueInput
}

input ChannelUpdateWithoutMembersDataInput {
  name: String
  messages: MessageUpdateManyWithoutChannelInput
}

input ChannelUpdateWithoutMessagesDataInput {
  name: String
  members: UserUpdateManyWithoutChannelsInput
}

input ChannelUpdateWithWhereUniqueWithoutMembersInput {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateWithoutMembersDataInput!
}

input ChannelUpsertWithoutMessagesInput {
  update: ChannelUpdateWithoutMessagesDataInput!
  create: ChannelCreateWithoutMessagesInput!
}

input ChannelUpsertWithWhereUniqueWithoutMembersInput {
  where: ChannelWhereUniqueInput!
  update: ChannelUpdateWithoutMembersDataInput!
  create: ChannelCreateWithoutMembersInput!
}

input ChannelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
}

input ChannelWhereUniqueInput {
  id: ID
}

scalar DateTime

type Department {
  id: ID!
  name: String!
  subDepartments: [String!]!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type DepartmentConnection {
  pageInfo: PageInfo!
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  id: ID
  name: String!
  subDepartments: DepartmentCreatesubDepartmentsInput
  members: UserCreateManyWithoutDepartmentInput
}

input DepartmentCreateOneWithoutMembersInput {
  create: DepartmentCreateWithoutMembersInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreatesubDepartmentsInput {
  set: [String!]
}

input DepartmentCreateWithoutMembersInput {
  id: ID
  name: String!
  subDepartments: DepartmentCreatesubDepartmentsInput
}

type DepartmentEdge {
  node: Department!
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type DepartmentPreviousValues {
  id: ID!
  name: String!
  subDepartments: [String!]!
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
  AND: [DepartmentSubscriptionWhereInput!]
  OR: [DepartmentSubscriptionWhereInput!]
  NOT: [DepartmentSubscriptionWhereInput!]
}

input DepartmentUpdateInput {
  name: String
  subDepartments: DepartmentUpdatesubDepartmentsInput
  members: UserUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateManyMutationInput {
  name: String
  subDepartments: DepartmentUpdatesubDepartmentsInput
}

input DepartmentUpdateOneWithoutMembersInput {
  create: DepartmentCreateWithoutMembersInput
  update: DepartmentUpdateWithoutMembersDataInput
  upsert: DepartmentUpsertWithoutMembersInput
  delete: Boolean
  disconnect: Boolean
  connect: DepartmentWhereUniqueInput
}

input DepartmentUpdatesubDepartmentsInput {
  set: [String!]
}

input DepartmentUpdateWithoutMembersDataInput {
  name: String
  subDepartments: DepartmentUpdatesubDepartmentsInput
}

input DepartmentUpsertWithoutMembersInput {
  update: DepartmentUpdateWithoutMembersDataInput!
  create: DepartmentCreateWithoutMembersInput!
}

input DepartmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
}

input DepartmentWhereUniqueInput {
  id: ID
}

scalar Long

type Message {
  id: ID!
  content: String!
  by: User!
  channel: Channel!
  createdAt: DateTime!
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  content: String!
  by: UserCreateOneWithoutMessagesInput!
  channel: ChannelCreateOneWithoutMessagesInput!
}

input MessageCreateManyWithoutByInput {
  create: [MessageCreateWithoutByInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutChannelInput {
  create: [MessageCreateWithoutChannelInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutByInput {
  id: ID
  content: String!
  channel: ChannelCreateOneWithoutMessagesInput!
}

input MessageCreateWithoutChannelInput {
  id: ID
  content: String!
  by: UserCreateOneWithoutMessagesInput!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
}

type MessagePreviousValues {
  id: ID!
  content: String!
  createdAt: DateTime!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateInput {
  content: String
  by: UserUpdateOneRequiredWithoutMessagesInput
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateManyDataInput {
  content: String
}

input MessageUpdateManyMutationInput {
  content: String
}

input MessageUpdateManyWithoutByInput {
  create: [MessageCreateWithoutByInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutByInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutByInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithoutChannelInput {
  create: [MessageCreateWithoutChannelInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutChannelInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutChannelInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateWithoutByDataInput {
  content: String
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateWithoutChannelDataInput {
  content: String
  by: UserUpdateOneRequiredWithoutMessagesInput
}

input MessageUpdateWithWhereUniqueWithoutByInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutByDataInput!
}

input MessageUpdateWithWhereUniqueWithoutChannelInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutChannelDataInput!
}

input MessageUpsertWithWhereUniqueWithoutByInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutByDataInput!
  create: MessageCreateWithoutByInput!
}

input MessageUpsertWithWhereUniqueWithoutChannelInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutChannelDataInput!
  create: MessageCreateWithoutChannelInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  by: UserWhereInput
  channel: ChannelWhereInput
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createChannel(data: ChannelCreateInput!): Channel!
  updateChannel(data: ChannelUpdateInput!, where: ChannelWhereUniqueInput!): Channel
  updateManyChannels(data: ChannelUpdateManyMutationInput!, where: ChannelWhereInput): BatchPayload!
  upsertChannel(where: ChannelWhereUniqueInput!, create: ChannelCreateInput!, update: ChannelUpdateInput!): Channel!
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  deleteManyChannels(where: ChannelWhereInput): BatchPayload!
  createDepartment(data: DepartmentCreateInput!): Department!
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateManyDepartments(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): BatchPayload!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  channel(where: ChannelWhereUniqueInput!): Channel
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel]!
  channelsConnection(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChannelConnection!
  department(where: DepartmentWhereUniqueInput!): Department
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  channel(where: ChannelSubscriptionWhereInput): ChannelSubscriptionPayload
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  rollNumber: String!
  email: String!
  mobile: String!
  upi: String!
  profilePic: String!
  coverPic: String!
  role: AccessLevel!
  department: Department
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  mobile: String!
  upi: String!
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  channels: ChannelCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutByInput
}

input UserCreateManyWithoutChannelsInput {
  create: [UserCreateWithoutChannelsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChannelsInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  mobile: String!
  upi: String!
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  messages: MessageCreateManyWithoutByInput
}

input UserCreateWithoutDepartmentInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  mobile: String!
  upi: String!
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  channels: ChannelCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutByInput
}

input UserCreateWithoutMessagesInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  mobile: String!
  upi: String!
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  channels: ChannelCreateManyWithoutMembersInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rollNumber_ASC
  rollNumber_DESC
  email_ASC
  email_DESC
  mobile_ASC
  mobile_DESC
  upi_ASC
  upi_DESC
  profilePic_ASC
  profilePic_DESC
  coverPic_ASC
  coverPic_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  rollNumber: String!
  email: String!
  mobile: String!
  upi: String!
  profilePic: String!
  coverPic: String!
  role: AccessLevel!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  rollNumber: String
  rollNumber_not: String
  rollNumber_in: [String!]
  rollNumber_not_in: [String!]
  rollNumber_lt: String
  rollNumber_lte: String
  rollNumber_gt: String
  rollNumber_gte: String
  rollNumber_contains: String
  rollNumber_not_contains: String
  rollNumber_starts_with: String
  rollNumber_not_starts_with: String
  rollNumber_ends_with: String
  rollNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  mobile: String
  mobile_not: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  upi: String
  upi_not: String
  upi_in: [String!]
  upi_not_in: [String!]
  upi_lt: String
  upi_lte: String
  upi_gt: String
  upi_gte: String
  upi_contains: String
  upi_not_contains: String
  upi_starts_with: String
  upi_not_starts_with: String
  upi_ends_with: String
  upi_not_ends_with: String
  profilePic: String
  profilePic_not: String
  profilePic_in: [String!]
  profilePic_not_in: [String!]
  profilePic_lt: String
  profilePic_lte: String
  profilePic_gt: String
  profilePic_gte: String
  profilePic_contains: String
  profilePic_not_contains: String
  profilePic_starts_with: String
  profilePic_not_starts_with: String
  profilePic_ends_with: String
  profilePic_not_ends_with: String
  coverPic: String
  coverPic_not: String
  coverPic_in: [String!]
  coverPic_not_in: [String!]
  coverPic_lt: String
  coverPic_lte: String
  coverPic_gt: String
  coverPic_gte: String
  coverPic_contains: String
  coverPic_not_contains: String
  coverPic_starts_with: String
  coverPic_not_starts_with: String
  coverPic_ends_with: String
  coverPic_not_ends_with: String
  role: AccessLevel
  role_not: AccessLevel
  role_in: [AccessLevel!]
  role_not_in: [AccessLevel!]
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  rollNumber: String
  email: String
  mobile: String
  upi: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutByInput
}

input UserUpdateManyDataInput {
  name: String
  rollNumber: String
  email: String
  mobile: String
  upi: String
  profilePic: String
  coverPic: String
  role: AccessLevel
}

input UserUpdateManyMutationInput {
  name: String
  rollNumber: String
  email: String
  mobile: String
  upi: String
  profilePic: String
  coverPic: String
  role: AccessLevel
}

input UserUpdateManyWithoutChannelsInput {
  create: [UserCreateWithoutChannelsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutChannelsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutChannelsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutDepartmentInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutDepartmentInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  update: UserUpdateWithoutMessagesDataInput
  upsert: UserUpsertWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutChannelsDataInput {
  name: String
  rollNumber: String
  email: String
  mobile: String
  upi: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  messages: MessageUpdateManyWithoutByInput
}

input UserUpdateWithoutDepartmentDataInput {
  name: String
  rollNumber: String
  email: String
  mobile: String
  upi: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutByInput
}

input UserUpdateWithoutMessagesDataInput {
  name: String
  rollNumber: String
  email: String
  mobile: String
  upi: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
}

input UserUpdateWithWhereUniqueWithoutChannelsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutChannelsDataInput!
}

input UserUpdateWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutDepartmentDataInput!
}

input UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput!
  create: UserCreateWithoutMessagesInput!
}

input UserUpsertWithWhereUniqueWithoutChannelsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutChannelsDataInput!
  create: UserCreateWithoutChannelsInput!
}

input UserUpsertWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutDepartmentDataInput!
  create: UserCreateWithoutDepartmentInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  rollNumber: String
  rollNumber_not: String
  rollNumber_in: [String!]
  rollNumber_not_in: [String!]
  rollNumber_lt: String
  rollNumber_lte: String
  rollNumber_gt: String
  rollNumber_gte: String
  rollNumber_contains: String
  rollNumber_not_contains: String
  rollNumber_starts_with: String
  rollNumber_not_starts_with: String
  rollNumber_ends_with: String
  rollNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  mobile: String
  mobile_not: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  upi: String
  upi_not: String
  upi_in: [String!]
  upi_not_in: [String!]
  upi_lt: String
  upi_lte: String
  upi_gt: String
  upi_gte: String
  upi_contains: String
  upi_not_contains: String
  upi_starts_with: String
  upi_not_starts_with: String
  upi_ends_with: String
  upi_not_ends_with: String
  profilePic: String
  profilePic_not: String
  profilePic_in: [String!]
  profilePic_not_in: [String!]
  profilePic_lt: String
  profilePic_lte: String
  profilePic_gt: String
  profilePic_gte: String
  profilePic_contains: String
  profilePic_not_contains: String
  profilePic_starts_with: String
  profilePic_not_starts_with: String
  profilePic_ends_with: String
  profilePic_not_ends_with: String
  coverPic: String
  coverPic_not: String
  coverPic_in: [String!]
  coverPic_not_in: [String!]
  coverPic_lt: String
  coverPic_lte: String
  coverPic_gt: String
  coverPic_gte: String
  coverPic_contains: String
  coverPic_not_contains: String
  coverPic_starts_with: String
  coverPic_not_starts_with: String
  coverPic_ends_with: String
  coverPic_not_ends_with: String
  role: AccessLevel
  role_not: AccessLevel
  role_in: [AccessLevel!]
  role_not_in: [AccessLevel!]
  department: DepartmentWhereInput
  channels_every: ChannelWhereInput
  channels_some: ChannelWhereInput
  channels_none: ChannelWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  rollNumber: String
  email: String
  mobile: String
}
`;
