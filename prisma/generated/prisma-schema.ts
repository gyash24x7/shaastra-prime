// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `enum AccessLevel {
  COORD
  CORE
  COCAS
  COCAD
  HEAD
}

type AggregateChannel {
  count: Int!
}

type AggregateDepartment {
  count: Int!
}

type AggregateMedia {
  count: Int!
}

type AggregateMessage {
  count: Int!
}

type AggregateReaction {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Channel {
  id: ID!
  name: String!
  createdAt: DateTime!
  description: String!
  archived: Boolean!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  media(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  createdBy: User!
}

type ChannelConnection {
  pageInfo: PageInfo!
  edges: [ChannelEdge]!
  aggregate: AggregateChannel!
}

input ChannelCreateInput {
  id: ID
  name: String!
  description: String!
  archived: Boolean
  members: UserCreateManyWithoutChannelsInput
  messages: MessageCreateManyWithoutChannelInput
  media: MediaCreateManyWithoutChannelInput
  createdBy: UserCreateOneWithoutCreatedChannelsInput!
}

input ChannelCreateManyWithoutCreatedByInput {
  create: [ChannelCreateWithoutCreatedByInput!]
  connect: [ChannelWhereUniqueInput!]
}

input ChannelCreateManyWithoutMembersInput {
  create: [ChannelCreateWithoutMembersInput!]
  connect: [ChannelWhereUniqueInput!]
}

input ChannelCreateOneWithoutMediaInput {
  create: ChannelCreateWithoutMediaInput
  connect: ChannelWhereUniqueInput
}

input ChannelCreateOneWithoutMessagesInput {
  create: ChannelCreateWithoutMessagesInput
  connect: ChannelWhereUniqueInput
}

input ChannelCreateWithoutCreatedByInput {
  id: ID
  name: String!
  description: String!
  archived: Boolean
  members: UserCreateManyWithoutChannelsInput
  messages: MessageCreateManyWithoutChannelInput
  media: MediaCreateManyWithoutChannelInput
}

input ChannelCreateWithoutMediaInput {
  id: ID
  name: String!
  description: String!
  archived: Boolean
  members: UserCreateManyWithoutChannelsInput
  messages: MessageCreateManyWithoutChannelInput
  createdBy: UserCreateOneWithoutCreatedChannelsInput!
}

input ChannelCreateWithoutMembersInput {
  id: ID
  name: String!
  description: String!
  archived: Boolean
  messages: MessageCreateManyWithoutChannelInput
  media: MediaCreateManyWithoutChannelInput
  createdBy: UserCreateOneWithoutCreatedChannelsInput!
}

input ChannelCreateWithoutMessagesInput {
  id: ID
  name: String!
  description: String!
  archived: Boolean
  members: UserCreateManyWithoutChannelsInput
  media: MediaCreateManyWithoutChannelInput
  createdBy: UserCreateOneWithoutCreatedChannelsInput!
}

type ChannelEdge {
  node: Channel!
  cursor: String!
}

enum ChannelOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  archived_ASC
  archived_DESC
}

type ChannelPreviousValues {
  id: ID!
  name: String!
  createdAt: DateTime!
  description: String!
  archived: Boolean!
}

input ChannelScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  archived: Boolean
  archived_not: Boolean
  AND: [ChannelScalarWhereInput!]
  OR: [ChannelScalarWhereInput!]
  NOT: [ChannelScalarWhereInput!]
}

type ChannelSubscriptionPayload {
  mutation: MutationType!
  node: Channel
  updatedFields: [String!]
  previousValues: ChannelPreviousValues
}

input ChannelSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ChannelWhereInput
  AND: [ChannelSubscriptionWhereInput!]
  OR: [ChannelSubscriptionWhereInput!]
  NOT: [ChannelSubscriptionWhereInput!]
}

input ChannelUpdateInput {
  name: String
  description: String
  archived: Boolean
  members: UserUpdateManyWithoutChannelsInput
  messages: MessageUpdateManyWithoutChannelInput
  media: MediaUpdateManyWithoutChannelInput
  createdBy: UserUpdateOneRequiredWithoutCreatedChannelsInput
}

input ChannelUpdateManyDataInput {
  name: String
  description: String
  archived: Boolean
}

input ChannelUpdateManyMutationInput {
  name: String
  description: String
  archived: Boolean
}

input ChannelUpdateManyWithoutCreatedByInput {
  create: [ChannelCreateWithoutCreatedByInput!]
  delete: [ChannelWhereUniqueInput!]
  connect: [ChannelWhereUniqueInput!]
  set: [ChannelWhereUniqueInput!]
  disconnect: [ChannelWhereUniqueInput!]
  update: [ChannelUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [ChannelUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [ChannelScalarWhereInput!]
  updateMany: [ChannelUpdateManyWithWhereNestedInput!]
}

input ChannelUpdateManyWithoutMembersInput {
  create: [ChannelCreateWithoutMembersInput!]
  delete: [ChannelWhereUniqueInput!]
  connect: [ChannelWhereUniqueInput!]
  set: [ChannelWhereUniqueInput!]
  disconnect: [ChannelWhereUniqueInput!]
  update: [ChannelUpdateWithWhereUniqueWithoutMembersInput!]
  upsert: [ChannelUpsertWithWhereUniqueWithoutMembersInput!]
  deleteMany: [ChannelScalarWhereInput!]
  updateMany: [ChannelUpdateManyWithWhereNestedInput!]
}

input ChannelUpdateManyWithWhereNestedInput {
  where: ChannelScalarWhereInput!
  data: ChannelUpdateManyDataInput!
}

input ChannelUpdateOneRequiredWithoutMediaInput {
  create: ChannelCreateWithoutMediaInput
  update: ChannelUpdateWithoutMediaDataInput
  upsert: ChannelUpsertWithoutMediaInput
  connect: ChannelWhereUniqueInput
}

input ChannelUpdateOneRequiredWithoutMessagesInput {
  create: ChannelCreateWithoutMessagesInput
  update: ChannelUpdateWithoutMessagesDataInput
  upsert: ChannelUpsertWithoutMessagesInput
  connect: ChannelWhereUniqueInput
}

input ChannelUpdateWithoutCreatedByDataInput {
  name: String
  description: String
  archived: Boolean
  members: UserUpdateManyWithoutChannelsInput
  messages: MessageUpdateManyWithoutChannelInput
  media: MediaUpdateManyWithoutChannelInput
}

input ChannelUpdateWithoutMediaDataInput {
  name: String
  description: String
  archived: Boolean
  members: UserUpdateManyWithoutChannelsInput
  messages: MessageUpdateManyWithoutChannelInput
  createdBy: UserUpdateOneRequiredWithoutCreatedChannelsInput
}

input ChannelUpdateWithoutMembersDataInput {
  name: String
  description: String
  archived: Boolean
  messages: MessageUpdateManyWithoutChannelInput
  media: MediaUpdateManyWithoutChannelInput
  createdBy: UserUpdateOneRequiredWithoutCreatedChannelsInput
}

input ChannelUpdateWithoutMessagesDataInput {
  name: String
  description: String
  archived: Boolean
  members: UserUpdateManyWithoutChannelsInput
  media: MediaUpdateManyWithoutChannelInput
  createdBy: UserUpdateOneRequiredWithoutCreatedChannelsInput
}

input ChannelUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateWithoutCreatedByDataInput!
}

input ChannelUpdateWithWhereUniqueWithoutMembersInput {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateWithoutMembersDataInput!
}

input ChannelUpsertWithoutMediaInput {
  update: ChannelUpdateWithoutMediaDataInput!
  create: ChannelCreateWithoutMediaInput!
}

input ChannelUpsertWithoutMessagesInput {
  update: ChannelUpdateWithoutMessagesDataInput!
  create: ChannelCreateWithoutMessagesInput!
}

input ChannelUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ChannelWhereUniqueInput!
  update: ChannelUpdateWithoutCreatedByDataInput!
  create: ChannelCreateWithoutCreatedByInput!
}

input ChannelUpsertWithWhereUniqueWithoutMembersInput {
  where: ChannelWhereUniqueInput!
  update: ChannelUpdateWithoutMembersDataInput!
  create: ChannelCreateWithoutMembersInput!
}

input ChannelWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  archived: Boolean
  archived_not: Boolean
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  media_every: MediaWhereInput
  media_some: MediaWhereInput
  media_none: MediaWhereInput
  createdBy: UserWhereInput
  AND: [ChannelWhereInput!]
  OR: [ChannelWhereInput!]
  NOT: [ChannelWhereInput!]
}

input ChannelWhereUniqueInput {
  id: ID
}

scalar DateTime

type Department {
  id: ID!
  name: String!
  subDepartments: [String!]!
  members(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type DepartmentConnection {
  pageInfo: PageInfo!
  edges: [DepartmentEdge]!
  aggregate: AggregateDepartment!
}

input DepartmentCreateInput {
  id: ID
  name: String!
  subDepartments: DepartmentCreatesubDepartmentsInput
  members: UserCreateManyWithoutDepartmentInput
}

input DepartmentCreateOneWithoutMembersInput {
  create: DepartmentCreateWithoutMembersInput
  connect: DepartmentWhereUniqueInput
}

input DepartmentCreatesubDepartmentsInput {
  set: [String!]
}

input DepartmentCreateWithoutMembersInput {
  id: ID
  name: String!
  subDepartments: DepartmentCreatesubDepartmentsInput
}

type DepartmentEdge {
  node: Department!
  cursor: String!
}

enum DepartmentOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type DepartmentPreviousValues {
  id: ID!
  name: String!
  subDepartments: [String!]!
}

type DepartmentSubscriptionPayload {
  mutation: MutationType!
  node: Department
  updatedFields: [String!]
  previousValues: DepartmentPreviousValues
}

input DepartmentSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: DepartmentWhereInput
  AND: [DepartmentSubscriptionWhereInput!]
  OR: [DepartmentSubscriptionWhereInput!]
  NOT: [DepartmentSubscriptionWhereInput!]
}

input DepartmentUpdateInput {
  name: String
  subDepartments: DepartmentUpdatesubDepartmentsInput
  members: UserUpdateManyWithoutDepartmentInput
}

input DepartmentUpdateManyMutationInput {
  name: String
  subDepartments: DepartmentUpdatesubDepartmentsInput
}

input DepartmentUpdateOneWithoutMembersInput {
  create: DepartmentCreateWithoutMembersInput
  update: DepartmentUpdateWithoutMembersDataInput
  upsert: DepartmentUpsertWithoutMembersInput
  delete: Boolean
  disconnect: Boolean
  connect: DepartmentWhereUniqueInput
}

input DepartmentUpdatesubDepartmentsInput {
  set: [String!]
}

input DepartmentUpdateWithoutMembersDataInput {
  name: String
  subDepartments: DepartmentUpdatesubDepartmentsInput
}

input DepartmentUpsertWithoutMembersInput {
  update: DepartmentUpdateWithoutMembersDataInput!
  create: DepartmentCreateWithoutMembersInput!
}

input DepartmentWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  members_every: UserWhereInput
  members_some: UserWhereInput
  members_none: UserWhereInput
  AND: [DepartmentWhereInput!]
  OR: [DepartmentWhereInput!]
  NOT: [DepartmentWhereInput!]
}

input DepartmentWhereUniqueInput {
  id: ID
}

scalar Long

type Media {
  id: ID!
  url: String!
  createdAt: DateTime!
  status: MessageStatus!
  starred: Boolean!
  uploadedBy: User!
  channel: Channel!
  seenBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  receivedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type MediaConnection {
  pageInfo: PageInfo!
  edges: [MediaEdge]!
  aggregate: AggregateMedia!
}

input MediaCreateInput {
  id: ID
  url: String!
  status: MessageStatus
  starred: Boolean
  uploadedBy: UserCreateOneWithoutMediaInput!
  channel: ChannelCreateOneWithoutMediaInput!
  seenBy: UserCreateManyWithoutSeenMediaInput
  receivedBy: UserCreateManyWithoutReceivedMediaInput
}

input MediaCreateManyWithoutChannelInput {
  create: [MediaCreateWithoutChannelInput!]
  connect: [MediaWhereUniqueInput!]
}

input MediaCreateManyWithoutReceivedByInput {
  create: [MediaCreateWithoutReceivedByInput!]
  connect: [MediaWhereUniqueInput!]
}

input MediaCreateManyWithoutSeenByInput {
  create: [MediaCreateWithoutSeenByInput!]
  connect: [MediaWhereUniqueInput!]
}

input MediaCreateManyWithoutUploadedByInput {
  create: [MediaCreateWithoutUploadedByInput!]
  connect: [MediaWhereUniqueInput!]
}

input MediaCreateWithoutChannelInput {
  id: ID
  url: String!
  status: MessageStatus
  starred: Boolean
  uploadedBy: UserCreateOneWithoutMediaInput!
  seenBy: UserCreateManyWithoutSeenMediaInput
  receivedBy: UserCreateManyWithoutReceivedMediaInput
}

input MediaCreateWithoutReceivedByInput {
  id: ID
  url: String!
  status: MessageStatus
  starred: Boolean
  uploadedBy: UserCreateOneWithoutMediaInput!
  channel: ChannelCreateOneWithoutMediaInput!
  seenBy: UserCreateManyWithoutSeenMediaInput
}

input MediaCreateWithoutSeenByInput {
  id: ID
  url: String!
  status: MessageStatus
  starred: Boolean
  uploadedBy: UserCreateOneWithoutMediaInput!
  channel: ChannelCreateOneWithoutMediaInput!
  receivedBy: UserCreateManyWithoutReceivedMediaInput
}

input MediaCreateWithoutUploadedByInput {
  id: ID
  url: String!
  status: MessageStatus
  starred: Boolean
  channel: ChannelCreateOneWithoutMediaInput!
  seenBy: UserCreateManyWithoutSeenMediaInput
  receivedBy: UserCreateManyWithoutReceivedMediaInput
}

type MediaEdge {
  node: Media!
  cursor: String!
}

enum MediaOrderByInput {
  id_ASC
  id_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
  status_ASC
  status_DESC
  starred_ASC
  starred_DESC
}

type MediaPreviousValues {
  id: ID!
  url: String!
  createdAt: DateTime!
  status: MessageStatus!
  starred: Boolean!
}

input MediaScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  status: MessageStatus
  status_not: MessageStatus
  status_in: [MessageStatus!]
  status_not_in: [MessageStatus!]
  starred: Boolean
  starred_not: Boolean
  AND: [MediaScalarWhereInput!]
  OR: [MediaScalarWhereInput!]
  NOT: [MediaScalarWhereInput!]
}

type MediaSubscriptionPayload {
  mutation: MutationType!
  node: Media
  updatedFields: [String!]
  previousValues: MediaPreviousValues
}

input MediaSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MediaWhereInput
  AND: [MediaSubscriptionWhereInput!]
  OR: [MediaSubscriptionWhereInput!]
  NOT: [MediaSubscriptionWhereInput!]
}

input MediaUpdateInput {
  url: String
  status: MessageStatus
  starred: Boolean
  uploadedBy: UserUpdateOneRequiredWithoutMediaInput
  channel: ChannelUpdateOneRequiredWithoutMediaInput
  seenBy: UserUpdateManyWithoutSeenMediaInput
  receivedBy: UserUpdateManyWithoutReceivedMediaInput
}

input MediaUpdateManyDataInput {
  url: String
  status: MessageStatus
  starred: Boolean
}

input MediaUpdateManyMutationInput {
  url: String
  status: MessageStatus
  starred: Boolean
}

input MediaUpdateManyWithoutChannelInput {
  create: [MediaCreateWithoutChannelInput!]
  delete: [MediaWhereUniqueInput!]
  connect: [MediaWhereUniqueInput!]
  set: [MediaWhereUniqueInput!]
  disconnect: [MediaWhereUniqueInput!]
  update: [MediaUpdateWithWhereUniqueWithoutChannelInput!]
  upsert: [MediaUpsertWithWhereUniqueWithoutChannelInput!]
  deleteMany: [MediaScalarWhereInput!]
  updateMany: [MediaUpdateManyWithWhereNestedInput!]
}

input MediaUpdateManyWithoutReceivedByInput {
  create: [MediaCreateWithoutReceivedByInput!]
  delete: [MediaWhereUniqueInput!]
  connect: [MediaWhereUniqueInput!]
  set: [MediaWhereUniqueInput!]
  disconnect: [MediaWhereUniqueInput!]
  update: [MediaUpdateWithWhereUniqueWithoutReceivedByInput!]
  upsert: [MediaUpsertWithWhereUniqueWithoutReceivedByInput!]
  deleteMany: [MediaScalarWhereInput!]
  updateMany: [MediaUpdateManyWithWhereNestedInput!]
}

input MediaUpdateManyWithoutSeenByInput {
  create: [MediaCreateWithoutSeenByInput!]
  delete: [MediaWhereUniqueInput!]
  connect: [MediaWhereUniqueInput!]
  set: [MediaWhereUniqueInput!]
  disconnect: [MediaWhereUniqueInput!]
  update: [MediaUpdateWithWhereUniqueWithoutSeenByInput!]
  upsert: [MediaUpsertWithWhereUniqueWithoutSeenByInput!]
  deleteMany: [MediaScalarWhereInput!]
  updateMany: [MediaUpdateManyWithWhereNestedInput!]
}

input MediaUpdateManyWithoutUploadedByInput {
  create: [MediaCreateWithoutUploadedByInput!]
  delete: [MediaWhereUniqueInput!]
  connect: [MediaWhereUniqueInput!]
  set: [MediaWhereUniqueInput!]
  disconnect: [MediaWhereUniqueInput!]
  update: [MediaUpdateWithWhereUniqueWithoutUploadedByInput!]
  upsert: [MediaUpsertWithWhereUniqueWithoutUploadedByInput!]
  deleteMany: [MediaScalarWhereInput!]
  updateMany: [MediaUpdateManyWithWhereNestedInput!]
}

input MediaUpdateManyWithWhereNestedInput {
  where: MediaScalarWhereInput!
  data: MediaUpdateManyDataInput!
}

input MediaUpdateWithoutChannelDataInput {
  url: String
  status: MessageStatus
  starred: Boolean
  uploadedBy: UserUpdateOneRequiredWithoutMediaInput
  seenBy: UserUpdateManyWithoutSeenMediaInput
  receivedBy: UserUpdateManyWithoutReceivedMediaInput
}

input MediaUpdateWithoutReceivedByDataInput {
  url: String
  status: MessageStatus
  starred: Boolean
  uploadedBy: UserUpdateOneRequiredWithoutMediaInput
  channel: ChannelUpdateOneRequiredWithoutMediaInput
  seenBy: UserUpdateManyWithoutSeenMediaInput
}

input MediaUpdateWithoutSeenByDataInput {
  url: String
  status: MessageStatus
  starred: Boolean
  uploadedBy: UserUpdateOneRequiredWithoutMediaInput
  channel: ChannelUpdateOneRequiredWithoutMediaInput
  receivedBy: UserUpdateManyWithoutReceivedMediaInput
}

input MediaUpdateWithoutUploadedByDataInput {
  url: String
  status: MessageStatus
  starred: Boolean
  channel: ChannelUpdateOneRequiredWithoutMediaInput
  seenBy: UserUpdateManyWithoutSeenMediaInput
  receivedBy: UserUpdateManyWithoutReceivedMediaInput
}

input MediaUpdateWithWhereUniqueWithoutChannelInput {
  where: MediaWhereUniqueInput!
  data: MediaUpdateWithoutChannelDataInput!
}

input MediaUpdateWithWhereUniqueWithoutReceivedByInput {
  where: MediaWhereUniqueInput!
  data: MediaUpdateWithoutReceivedByDataInput!
}

input MediaUpdateWithWhereUniqueWithoutSeenByInput {
  where: MediaWhereUniqueInput!
  data: MediaUpdateWithoutSeenByDataInput!
}

input MediaUpdateWithWhereUniqueWithoutUploadedByInput {
  where: MediaWhereUniqueInput!
  data: MediaUpdateWithoutUploadedByDataInput!
}

input MediaUpsertWithWhereUniqueWithoutChannelInput {
  where: MediaWhereUniqueInput!
  update: MediaUpdateWithoutChannelDataInput!
  create: MediaCreateWithoutChannelInput!
}

input MediaUpsertWithWhereUniqueWithoutReceivedByInput {
  where: MediaWhereUniqueInput!
  update: MediaUpdateWithoutReceivedByDataInput!
  create: MediaCreateWithoutReceivedByInput!
}

input MediaUpsertWithWhereUniqueWithoutSeenByInput {
  where: MediaWhereUniqueInput!
  update: MediaUpdateWithoutSeenByDataInput!
  create: MediaCreateWithoutSeenByInput!
}

input MediaUpsertWithWhereUniqueWithoutUploadedByInput {
  where: MediaWhereUniqueInput!
  update: MediaUpdateWithoutUploadedByDataInput!
  create: MediaCreateWithoutUploadedByInput!
}

input MediaWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  url: String
  url_not: String
  url_in: [String!]
  url_not_in: [String!]
  url_lt: String
  url_lte: String
  url_gt: String
  url_gte: String
  url_contains: String
  url_not_contains: String
  url_starts_with: String
  url_not_starts_with: String
  url_ends_with: String
  url_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  status: MessageStatus
  status_not: MessageStatus
  status_in: [MessageStatus!]
  status_not_in: [MessageStatus!]
  starred: Boolean
  starred_not: Boolean
  uploadedBy: UserWhereInput
  channel: ChannelWhereInput
  seenBy_every: UserWhereInput
  seenBy_some: UserWhereInput
  seenBy_none: UserWhereInput
  receivedBy_every: UserWhereInput
  receivedBy_some: UserWhereInput
  receivedBy_none: UserWhereInput
  AND: [MediaWhereInput!]
  OR: [MediaWhereInput!]
  NOT: [MediaWhereInput!]
}

input MediaWhereUniqueInput {
  id: ID
}

type Message {
  id: ID!
  content: String!
  createdAt: DateTime!
  status: MessageStatus!
  starred: Boolean!
  createdBy: User!
  channel: Channel!
  seenBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  receivedBy(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  tagged(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  reactions(where: ReactionWhereInput, orderBy: ReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reaction!]
}

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
  aggregate: AggregateMessage!
}

input MessageCreateInput {
  id: ID
  content: String!
  status: MessageStatus
  starred: Boolean
  createdBy: UserCreateOneWithoutMessagesInput!
  channel: ChannelCreateOneWithoutMessagesInput!
  seenBy: UserCreateManyWithoutSeenMessagesInput
  receivedBy: UserCreateManyInput
  tagged: UserCreateManyWithoutTaggedMessagesInput
  reactions: ReactionCreateManyWithoutMessageInput
}

input MessageCreateManyInput {
  create: [MessageCreateInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutChannelInput {
  create: [MessageCreateWithoutChannelInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutCreatedByInput {
  create: [MessageCreateWithoutCreatedByInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutSeenByInput {
  create: [MessageCreateWithoutSeenByInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutTaggedInput {
  create: [MessageCreateWithoutTaggedInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateOneWithoutReactionsInput {
  create: MessageCreateWithoutReactionsInput
  connect: MessageWhereUniqueInput
}

input MessageCreateWithoutChannelInput {
  id: ID
  content: String!
  status: MessageStatus
  starred: Boolean
  createdBy: UserCreateOneWithoutMessagesInput!
  seenBy: UserCreateManyWithoutSeenMessagesInput
  receivedBy: UserCreateManyInput
  tagged: UserCreateManyWithoutTaggedMessagesInput
  reactions: ReactionCreateManyWithoutMessageInput
}

input MessageCreateWithoutCreatedByInput {
  id: ID
  content: String!
  status: MessageStatus
  starred: Boolean
  channel: ChannelCreateOneWithoutMessagesInput!
  seenBy: UserCreateManyWithoutSeenMessagesInput
  receivedBy: UserCreateManyInput
  tagged: UserCreateManyWithoutTaggedMessagesInput
  reactions: ReactionCreateManyWithoutMessageInput
}

input MessageCreateWithoutReactionsInput {
  id: ID
  content: String!
  status: MessageStatus
  starred: Boolean
  createdBy: UserCreateOneWithoutMessagesInput!
  channel: ChannelCreateOneWithoutMessagesInput!
  seenBy: UserCreateManyWithoutSeenMessagesInput
  receivedBy: UserCreateManyInput
  tagged: UserCreateManyWithoutTaggedMessagesInput
}

input MessageCreateWithoutSeenByInput {
  id: ID
  content: String!
  status: MessageStatus
  starred: Boolean
  createdBy: UserCreateOneWithoutMessagesInput!
  channel: ChannelCreateOneWithoutMessagesInput!
  receivedBy: UserCreateManyInput
  tagged: UserCreateManyWithoutTaggedMessagesInput
  reactions: ReactionCreateManyWithoutMessageInput
}

input MessageCreateWithoutTaggedInput {
  id: ID
  content: String!
  status: MessageStatus
  starred: Boolean
  createdBy: UserCreateOneWithoutMessagesInput!
  channel: ChannelCreateOneWithoutMessagesInput!
  seenBy: UserCreateManyWithoutSeenMessagesInput
  receivedBy: UserCreateManyInput
  reactions: ReactionCreateManyWithoutMessageInput
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  status_ASC
  status_DESC
  starred_ASC
  starred_DESC
}

type MessagePreviousValues {
  id: ID!
  content: String!
  createdAt: DateTime!
  status: MessageStatus!
  starred: Boolean!
}

input MessageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  status: MessageStatus
  status_not: MessageStatus
  status_in: [MessageStatus!]
  status_not_in: [MessageStatus!]
  starred: Boolean
  starred_not: Boolean
  AND: [MessageScalarWhereInput!]
  OR: [MessageScalarWhereInput!]
  NOT: [MessageScalarWhereInput!]
}

enum MessageStatus {
  SENT
  DELIVERED
  SEEN
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  NOT: [MessageSubscriptionWhereInput!]
}

input MessageUpdateDataInput {
  content: String
  status: MessageStatus
  starred: Boolean
  createdBy: UserUpdateOneRequiredWithoutMessagesInput
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
  seenBy: UserUpdateManyWithoutSeenMessagesInput
  receivedBy: UserUpdateManyInput
  tagged: UserUpdateManyWithoutTaggedMessagesInput
  reactions: ReactionUpdateManyWithoutMessageInput
}

input MessageUpdateInput {
  content: String
  status: MessageStatus
  starred: Boolean
  createdBy: UserUpdateOneRequiredWithoutMessagesInput
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
  seenBy: UserUpdateManyWithoutSeenMessagesInput
  receivedBy: UserUpdateManyInput
  tagged: UserUpdateManyWithoutTaggedMessagesInput
  reactions: ReactionUpdateManyWithoutMessageInput
}

input MessageUpdateManyDataInput {
  content: String
  status: MessageStatus
  starred: Boolean
}

input MessageUpdateManyInput {
  create: [MessageCreateInput!]
  update: [MessageUpdateWithWhereUniqueNestedInput!]
  upsert: [MessageUpsertWithWhereUniqueNestedInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyMutationInput {
  content: String
  status: MessageStatus
  starred: Boolean
}

input MessageUpdateManyWithoutChannelInput {
  create: [MessageCreateWithoutChannelInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutChannelInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutChannelInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithoutCreatedByInput {
  create: [MessageCreateWithoutCreatedByInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutCreatedByInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithoutSeenByInput {
  create: [MessageCreateWithoutSeenByInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutSeenByInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutSeenByInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithoutTaggedInput {
  create: [MessageCreateWithoutTaggedInput!]
  delete: [MessageWhereUniqueInput!]
  connect: [MessageWhereUniqueInput!]
  set: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithWhereUniqueWithoutTaggedInput!]
  upsert: [MessageUpsertWithWhereUniqueWithoutTaggedInput!]
  deleteMany: [MessageScalarWhereInput!]
  updateMany: [MessageUpdateManyWithWhereNestedInput!]
}

input MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput!
  data: MessageUpdateManyDataInput!
}

input MessageUpdateOneRequiredWithoutReactionsInput {
  create: MessageCreateWithoutReactionsInput
  update: MessageUpdateWithoutReactionsDataInput
  upsert: MessageUpsertWithoutReactionsInput
  connect: MessageWhereUniqueInput
}

input MessageUpdateWithoutChannelDataInput {
  content: String
  status: MessageStatus
  starred: Boolean
  createdBy: UserUpdateOneRequiredWithoutMessagesInput
  seenBy: UserUpdateManyWithoutSeenMessagesInput
  receivedBy: UserUpdateManyInput
  tagged: UserUpdateManyWithoutTaggedMessagesInput
  reactions: ReactionUpdateManyWithoutMessageInput
}

input MessageUpdateWithoutCreatedByDataInput {
  content: String
  status: MessageStatus
  starred: Boolean
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
  seenBy: UserUpdateManyWithoutSeenMessagesInput
  receivedBy: UserUpdateManyInput
  tagged: UserUpdateManyWithoutTaggedMessagesInput
  reactions: ReactionUpdateManyWithoutMessageInput
}

input MessageUpdateWithoutReactionsDataInput {
  content: String
  status: MessageStatus
  starred: Boolean
  createdBy: UserUpdateOneRequiredWithoutMessagesInput
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
  seenBy: UserUpdateManyWithoutSeenMessagesInput
  receivedBy: UserUpdateManyInput
  tagged: UserUpdateManyWithoutTaggedMessagesInput
}

input MessageUpdateWithoutSeenByDataInput {
  content: String
  status: MessageStatus
  starred: Boolean
  createdBy: UserUpdateOneRequiredWithoutMessagesInput
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
  receivedBy: UserUpdateManyInput
  tagged: UserUpdateManyWithoutTaggedMessagesInput
  reactions: ReactionUpdateManyWithoutMessageInput
}

input MessageUpdateWithoutTaggedDataInput {
  content: String
  status: MessageStatus
  starred: Boolean
  createdBy: UserUpdateOneRequiredWithoutMessagesInput
  channel: ChannelUpdateOneRequiredWithoutMessagesInput
  seenBy: UserUpdateManyWithoutSeenMessagesInput
  receivedBy: UserUpdateManyInput
  reactions: ReactionUpdateManyWithoutMessageInput
}

input MessageUpdateWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateDataInput!
}

input MessageUpdateWithWhereUniqueWithoutChannelInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutChannelDataInput!
}

input MessageUpdateWithWhereUniqueWithoutCreatedByInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutCreatedByDataInput!
}

input MessageUpdateWithWhereUniqueWithoutSeenByInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutSeenByDataInput!
}

input MessageUpdateWithWhereUniqueWithoutTaggedInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutTaggedDataInput!
}

input MessageUpsertWithoutReactionsInput {
  update: MessageUpdateWithoutReactionsDataInput!
  create: MessageCreateWithoutReactionsInput!
}

input MessageUpsertWithWhereUniqueNestedInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateDataInput!
  create: MessageCreateInput!
}

input MessageUpsertWithWhereUniqueWithoutChannelInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutChannelDataInput!
  create: MessageCreateWithoutChannelInput!
}

input MessageUpsertWithWhereUniqueWithoutCreatedByInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutCreatedByDataInput!
  create: MessageCreateWithoutCreatedByInput!
}

input MessageUpsertWithWhereUniqueWithoutSeenByInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutSeenByDataInput!
  create: MessageCreateWithoutSeenByInput!
}

input MessageUpsertWithWhereUniqueWithoutTaggedInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutTaggedDataInput!
  create: MessageCreateWithoutTaggedInput!
}

input MessageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  status: MessageStatus
  status_not: MessageStatus
  status_in: [MessageStatus!]
  status_not_in: [MessageStatus!]
  starred: Boolean
  starred_not: Boolean
  createdBy: UserWhereInput
  channel: ChannelWhereInput
  seenBy_every: UserWhereInput
  seenBy_some: UserWhereInput
  seenBy_none: UserWhereInput
  receivedBy_every: UserWhereInput
  receivedBy_some: UserWhereInput
  receivedBy_none: UserWhereInput
  tagged_every: UserWhereInput
  tagged_some: UserWhereInput
  tagged_none: UserWhereInput
  reactions_every: ReactionWhereInput
  reactions_some: ReactionWhereInput
  reactions_none: ReactionWhereInput
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  NOT: [MessageWhereInput!]
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createChannel(data: ChannelCreateInput!): Channel!
  updateChannel(data: ChannelUpdateInput!, where: ChannelWhereUniqueInput!): Channel
  updateManyChannels(data: ChannelUpdateManyMutationInput!, where: ChannelWhereInput): BatchPayload!
  upsertChannel(where: ChannelWhereUniqueInput!, create: ChannelCreateInput!, update: ChannelUpdateInput!): Channel!
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  deleteManyChannels(where: ChannelWhereInput): BatchPayload!
  createDepartment(data: DepartmentCreateInput!): Department!
  updateDepartment(data: DepartmentUpdateInput!, where: DepartmentWhereUniqueInput!): Department
  updateManyDepartments(data: DepartmentUpdateManyMutationInput!, where: DepartmentWhereInput): BatchPayload!
  upsertDepartment(where: DepartmentWhereUniqueInput!, create: DepartmentCreateInput!, update: DepartmentUpdateInput!): Department!
  deleteDepartment(where: DepartmentWhereUniqueInput!): Department
  deleteManyDepartments(where: DepartmentWhereInput): BatchPayload!
  createMedia(data: MediaCreateInput!): Media!
  updateMedia(data: MediaUpdateInput!, where: MediaWhereUniqueInput!): Media
  updateManyMedias(data: MediaUpdateManyMutationInput!, where: MediaWhereInput): BatchPayload!
  upsertMedia(where: MediaWhereUniqueInput!, create: MediaCreateInput!, update: MediaUpdateInput!): Media!
  deleteMedia(where: MediaWhereUniqueInput!): Media
  deleteManyMedias(where: MediaWhereInput): BatchPayload!
  createMessage(data: MessageCreateInput!): Message!
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateManyMessages(data: MessageUpdateManyMutationInput!, where: MessageWhereInput): BatchPayload!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteManyMessages(where: MessageWhereInput): BatchPayload!
  createReaction(data: ReactionCreateInput!): Reaction!
  updateReaction(data: ReactionUpdateInput!, where: ReactionWhereUniqueInput!): Reaction
  updateManyReactions(data: ReactionUpdateManyMutationInput!, where: ReactionWhereInput): BatchPayload!
  upsertReaction(where: ReactionWhereUniqueInput!, create: ReactionCreateInput!, update: ReactionUpdateInput!): Reaction!
  deleteReaction(where: ReactionWhereUniqueInput!): Reaction
  deleteManyReactions(where: ReactionWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  channel(where: ChannelWhereUniqueInput!): Channel
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel]!
  channelsConnection(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChannelConnection!
  department(where: DepartmentWhereUniqueInput!): Department
  departments(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Department]!
  departmentsConnection(where: DepartmentWhereInput, orderBy: DepartmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DepartmentConnection!
  media(where: MediaWhereUniqueInput!): Media
  medias(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media]!
  mediasConnection(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MediaConnection!
  message(where: MessageWhereUniqueInput!): Message
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  reaction(where: ReactionWhereUniqueInput!): Reaction
  reactions(where: ReactionWhereInput, orderBy: ReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reaction]!
  reactionsConnection(where: ReactionWhereInput, orderBy: ReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReactionConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Reaction {
  id: ID!
  type: ReactionType!
  by: User!
  message: Message!
}

type ReactionConnection {
  pageInfo: PageInfo!
  edges: [ReactionEdge]!
  aggregate: AggregateReaction!
}

input ReactionCreateInput {
  id: ID
  type: ReactionType!
  by: UserCreateOneWithoutReactionsInput!
  message: MessageCreateOneWithoutReactionsInput!
}

input ReactionCreateManyWithoutByInput {
  create: [ReactionCreateWithoutByInput!]
  connect: [ReactionWhereUniqueInput!]
}

input ReactionCreateManyWithoutMessageInput {
  create: [ReactionCreateWithoutMessageInput!]
  connect: [ReactionWhereUniqueInput!]
}

input ReactionCreateWithoutByInput {
  id: ID
  type: ReactionType!
  message: MessageCreateOneWithoutReactionsInput!
}

input ReactionCreateWithoutMessageInput {
  id: ID
  type: ReactionType!
  by: UserCreateOneWithoutReactionsInput!
}

type ReactionEdge {
  node: Reaction!
  cursor: String!
}

enum ReactionOrderByInput {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
}

type ReactionPreviousValues {
  id: ID!
  type: ReactionType!
}

input ReactionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: ReactionType
  type_not: ReactionType
  type_in: [ReactionType!]
  type_not_in: [ReactionType!]
  AND: [ReactionScalarWhereInput!]
  OR: [ReactionScalarWhereInput!]
  NOT: [ReactionScalarWhereInput!]
}

type ReactionSubscriptionPayload {
  mutation: MutationType!
  node: Reaction
  updatedFields: [String!]
  previousValues: ReactionPreviousValues
}

input ReactionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReactionWhereInput
  AND: [ReactionSubscriptionWhereInput!]
  OR: [ReactionSubscriptionWhereInput!]
  NOT: [ReactionSubscriptionWhereInput!]
}

enum ReactionType {
  LOVE
  HAHA
  CRY
  LIKE
}

input ReactionUpdateInput {
  type: ReactionType
  by: UserUpdateOneRequiredWithoutReactionsInput
  message: MessageUpdateOneRequiredWithoutReactionsInput
}

input ReactionUpdateManyDataInput {
  type: ReactionType
}

input ReactionUpdateManyMutationInput {
  type: ReactionType
}

input ReactionUpdateManyWithoutByInput {
  create: [ReactionCreateWithoutByInput!]
  delete: [ReactionWhereUniqueInput!]
  connect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  disconnect: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutByInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutByInput!]
  deleteMany: [ReactionScalarWhereInput!]
  updateMany: [ReactionUpdateManyWithWhereNestedInput!]
}

input ReactionUpdateManyWithoutMessageInput {
  create: [ReactionCreateWithoutMessageInput!]
  delete: [ReactionWhereUniqueInput!]
  connect: [ReactionWhereUniqueInput!]
  set: [ReactionWhereUniqueInput!]
  disconnect: [ReactionWhereUniqueInput!]
  update: [ReactionUpdateWithWhereUniqueWithoutMessageInput!]
  upsert: [ReactionUpsertWithWhereUniqueWithoutMessageInput!]
  deleteMany: [ReactionScalarWhereInput!]
  updateMany: [ReactionUpdateManyWithWhereNestedInput!]
}

input ReactionUpdateManyWithWhereNestedInput {
  where: ReactionScalarWhereInput!
  data: ReactionUpdateManyDataInput!
}

input ReactionUpdateWithoutByDataInput {
  type: ReactionType
  message: MessageUpdateOneRequiredWithoutReactionsInput
}

input ReactionUpdateWithoutMessageDataInput {
  type: ReactionType
  by: UserUpdateOneRequiredWithoutReactionsInput
}

input ReactionUpdateWithWhereUniqueWithoutByInput {
  where: ReactionWhereUniqueInput!
  data: ReactionUpdateWithoutByDataInput!
}

input ReactionUpdateWithWhereUniqueWithoutMessageInput {
  where: ReactionWhereUniqueInput!
  data: ReactionUpdateWithoutMessageDataInput!
}

input ReactionUpsertWithWhereUniqueWithoutByInput {
  where: ReactionWhereUniqueInput!
  update: ReactionUpdateWithoutByDataInput!
  create: ReactionCreateWithoutByInput!
}

input ReactionUpsertWithWhereUniqueWithoutMessageInput {
  where: ReactionWhereUniqueInput!
  update: ReactionUpdateWithoutMessageDataInput!
  create: ReactionCreateWithoutMessageInput!
}

input ReactionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  type: ReactionType
  type_not: ReactionType
  type_in: [ReactionType!]
  type_not_in: [ReactionType!]
  by: UserWhereInput
  message: MessageWhereInput
  AND: [ReactionWhereInput!]
  OR: [ReactionWhereInput!]
  NOT: [ReactionWhereInput!]
}

input ReactionWhereUniqueInput {
  id: ID
}

type Subscription {
  channel(where: ChannelSubscriptionWhereInput): ChannelSubscriptionPayload
  department(where: DepartmentSubscriptionWhereInput): DepartmentSubscriptionPayload
  media(where: MediaSubscriptionWhereInput): MediaSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  reaction(where: ReactionSubscriptionWhereInput): ReactionSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String!
  profilePic: String!
  coverPic: String!
  role: AccessLevel!
  department: Department
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel!]
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  seenMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  receivedMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  seenMedia(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  receivedMedia(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  media(where: MediaWhereInput, orderBy: MediaOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Media!]
  createdChannels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel!]
  taggedMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  reactions(where: ReactionWhereInput, orderBy: ReactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reaction!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  channels: ChannelCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutCreatedByInput
  seenMessages: MessageCreateManyWithoutSeenByInput
  receivedMessages: MessageCreateManyInput
  seenMedia: MediaCreateManyWithoutSeenByInput
  receivedMedia: MediaCreateManyWithoutReceivedByInput
  media: MediaCreateManyWithoutUploadedByInput
  createdChannels: ChannelCreateManyWithoutCreatedByInput
  taggedMessages: MessageCreateManyWithoutTaggedInput
  reactions: ReactionCreateManyWithoutByInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutChannelsInput {
  create: [UserCreateWithoutChannelsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutReceivedMediaInput {
  create: [UserCreateWithoutReceivedMediaInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSeenMediaInput {
  create: [UserCreateWithoutSeenMediaInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutSeenMessagesInput {
  create: [UserCreateWithoutSeenMessagesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutTaggedMessagesInput {
  create: [UserCreateWithoutTaggedMessagesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutCreatedChannelsInput {
  create: UserCreateWithoutCreatedChannelsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMediaInput {
  create: UserCreateWithoutMediaInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReactionsInput {
  create: UserCreateWithoutReactionsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutChannelsInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  messages: MessageCreateManyWithoutCreatedByInput
  seenMessages: MessageCreateManyWithoutSeenByInput
  receivedMessages: MessageCreateManyInput
  seenMedia: MediaCreateManyWithoutSeenByInput
  receivedMedia: MediaCreateManyWithoutReceivedByInput
  media: MediaCreateManyWithoutUploadedByInput
  createdChannels: ChannelCreateManyWithoutCreatedByInput
  taggedMessages: MessageCreateManyWithoutTaggedInput
  reactions: ReactionCreateManyWithoutByInput
}

input UserCreateWithoutCreatedChannelsInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  channels: ChannelCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutCreatedByInput
  seenMessages: MessageCreateManyWithoutSeenByInput
  receivedMessages: MessageCreateManyInput
  seenMedia: MediaCreateManyWithoutSeenByInput
  receivedMedia: MediaCreateManyWithoutReceivedByInput
  media: MediaCreateManyWithoutUploadedByInput
  taggedMessages: MessageCreateManyWithoutTaggedInput
  reactions: ReactionCreateManyWithoutByInput
}

input UserCreateWithoutDepartmentInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  channels: ChannelCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutCreatedByInput
  seenMessages: MessageCreateManyWithoutSeenByInput
  receivedMessages: MessageCreateManyInput
  seenMedia: MediaCreateManyWithoutSeenByInput
  receivedMedia: MediaCreateManyWithoutReceivedByInput
  media: MediaCreateManyWithoutUploadedByInput
  createdChannels: ChannelCreateManyWithoutCreatedByInput
  taggedMessages: MessageCreateManyWithoutTaggedInput
  reactions: ReactionCreateManyWithoutByInput
}

input UserCreateWithoutMediaInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  channels: ChannelCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutCreatedByInput
  seenMessages: MessageCreateManyWithoutSeenByInput
  receivedMessages: MessageCreateManyInput
  seenMedia: MediaCreateManyWithoutSeenByInput
  receivedMedia: MediaCreateManyWithoutReceivedByInput
  createdChannels: ChannelCreateManyWithoutCreatedByInput
  taggedMessages: MessageCreateManyWithoutTaggedInput
  reactions: ReactionCreateManyWithoutByInput
}

input UserCreateWithoutMessagesInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  channels: ChannelCreateManyWithoutMembersInput
  seenMessages: MessageCreateManyWithoutSeenByInput
  receivedMessages: MessageCreateManyInput
  seenMedia: MediaCreateManyWithoutSeenByInput
  receivedMedia: MediaCreateManyWithoutReceivedByInput
  media: MediaCreateManyWithoutUploadedByInput
  createdChannels: ChannelCreateManyWithoutCreatedByInput
  taggedMessages: MessageCreateManyWithoutTaggedInput
  reactions: ReactionCreateManyWithoutByInput
}

input UserCreateWithoutReactionsInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  channels: ChannelCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutCreatedByInput
  seenMessages: MessageCreateManyWithoutSeenByInput
  receivedMessages: MessageCreateManyInput
  seenMedia: MediaCreateManyWithoutSeenByInput
  receivedMedia: MediaCreateManyWithoutReceivedByInput
  media: MediaCreateManyWithoutUploadedByInput
  createdChannels: ChannelCreateManyWithoutCreatedByInput
  taggedMessages: MessageCreateManyWithoutTaggedInput
}

input UserCreateWithoutReceivedMediaInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  channels: ChannelCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutCreatedByInput
  seenMessages: MessageCreateManyWithoutSeenByInput
  receivedMessages: MessageCreateManyInput
  seenMedia: MediaCreateManyWithoutSeenByInput
  media: MediaCreateManyWithoutUploadedByInput
  createdChannels: ChannelCreateManyWithoutCreatedByInput
  taggedMessages: MessageCreateManyWithoutTaggedInput
  reactions: ReactionCreateManyWithoutByInput
}

input UserCreateWithoutSeenMediaInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  channels: ChannelCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutCreatedByInput
  seenMessages: MessageCreateManyWithoutSeenByInput
  receivedMessages: MessageCreateManyInput
  receivedMedia: MediaCreateManyWithoutReceivedByInput
  media: MediaCreateManyWithoutUploadedByInput
  createdChannels: ChannelCreateManyWithoutCreatedByInput
  taggedMessages: MessageCreateManyWithoutTaggedInput
  reactions: ReactionCreateManyWithoutByInput
}

input UserCreateWithoutSeenMessagesInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  channels: ChannelCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutCreatedByInput
  receivedMessages: MessageCreateManyInput
  seenMedia: MediaCreateManyWithoutSeenByInput
  receivedMedia: MediaCreateManyWithoutReceivedByInput
  media: MediaCreateManyWithoutUploadedByInput
  createdChannels: ChannelCreateManyWithoutCreatedByInput
  taggedMessages: MessageCreateManyWithoutTaggedInput
  reactions: ReactionCreateManyWithoutByInput
}

input UserCreateWithoutTaggedMessagesInput {
  id: ID
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String
  profilePic: String!
  coverPic: String!
  role: AccessLevel
  department: DepartmentCreateOneWithoutMembersInput
  channels: ChannelCreateManyWithoutMembersInput
  messages: MessageCreateManyWithoutCreatedByInput
  seenMessages: MessageCreateManyWithoutSeenByInput
  receivedMessages: MessageCreateManyInput
  seenMedia: MediaCreateManyWithoutSeenByInput
  receivedMedia: MediaCreateManyWithoutReceivedByInput
  media: MediaCreateManyWithoutUploadedByInput
  createdChannels: ChannelCreateManyWithoutCreatedByInput
  reactions: ReactionCreateManyWithoutByInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  rollNumber_ASC
  rollNumber_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  mobile_ASC
  mobile_DESC
  upi_ASC
  upi_DESC
  about_ASC
  about_DESC
  profilePic_ASC
  profilePic_DESC
  coverPic_ASC
  coverPic_DESC
  role_ASC
  role_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  rollNumber: String!
  email: String!
  password: String!
  mobile: String!
  upi: String!
  about: String!
  profilePic: String!
  coverPic: String!
  role: AccessLevel!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  rollNumber: String
  rollNumber_not: String
  rollNumber_in: [String!]
  rollNumber_not_in: [String!]
  rollNumber_lt: String
  rollNumber_lte: String
  rollNumber_gt: String
  rollNumber_gte: String
  rollNumber_contains: String
  rollNumber_not_contains: String
  rollNumber_starts_with: String
  rollNumber_not_starts_with: String
  rollNumber_ends_with: String
  rollNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  mobile: String
  mobile_not: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  upi: String
  upi_not: String
  upi_in: [String!]
  upi_not_in: [String!]
  upi_lt: String
  upi_lte: String
  upi_gt: String
  upi_gte: String
  upi_contains: String
  upi_not_contains: String
  upi_starts_with: String
  upi_not_starts_with: String
  upi_ends_with: String
  upi_not_ends_with: String
  about: String
  about_not: String
  about_in: [String!]
  about_not_in: [String!]
  about_lt: String
  about_lte: String
  about_gt: String
  about_gte: String
  about_contains: String
  about_not_contains: String
  about_starts_with: String
  about_not_starts_with: String
  about_ends_with: String
  about_not_ends_with: String
  profilePic: String
  profilePic_not: String
  profilePic_in: [String!]
  profilePic_not_in: [String!]
  profilePic_lt: String
  profilePic_lte: String
  profilePic_gt: String
  profilePic_gte: String
  profilePic_contains: String
  profilePic_not_contains: String
  profilePic_starts_with: String
  profilePic_not_starts_with: String
  profilePic_ends_with: String
  profilePic_not_ends_with: String
  coverPic: String
  coverPic_not: String
  coverPic_in: [String!]
  coverPic_not_in: [String!]
  coverPic_lt: String
  coverPic_lte: String
  coverPic_gt: String
  coverPic_gte: String
  coverPic_contains: String
  coverPic_not_contains: String
  coverPic_starts_with: String
  coverPic_not_starts_with: String
  coverPic_ends_with: String
  coverPic_not_ends_with: String
  role: AccessLevel
  role_not: AccessLevel
  role_in: [AccessLevel!]
  role_not_in: [AccessLevel!]
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutCreatedByInput
  seenMessages: MessageUpdateManyWithoutSeenByInput
  receivedMessages: MessageUpdateManyInput
  seenMedia: MediaUpdateManyWithoutSeenByInput
  receivedMedia: MediaUpdateManyWithoutReceivedByInput
  media: MediaUpdateManyWithoutUploadedByInput
  createdChannels: ChannelUpdateManyWithoutCreatedByInput
  taggedMessages: MessageUpdateManyWithoutTaggedInput
  reactions: ReactionUpdateManyWithoutByInput
}

input UserUpdateInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutCreatedByInput
  seenMessages: MessageUpdateManyWithoutSeenByInput
  receivedMessages: MessageUpdateManyInput
  seenMedia: MediaUpdateManyWithoutSeenByInput
  receivedMedia: MediaUpdateManyWithoutReceivedByInput
  media: MediaUpdateManyWithoutUploadedByInput
  createdChannels: ChannelUpdateManyWithoutCreatedByInput
  taggedMessages: MessageUpdateManyWithoutTaggedInput
  reactions: ReactionUpdateManyWithoutByInput
}

input UserUpdateManyDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
}

input UserUpdateManyWithoutChannelsInput {
  create: [UserCreateWithoutChannelsInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutChannelsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutChannelsInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutDepartmentInput {
  create: [UserCreateWithoutDepartmentInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutDepartmentInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutDepartmentInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutReceivedMediaInput {
  create: [UserCreateWithoutReceivedMediaInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutReceivedMediaInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutReceivedMediaInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutSeenMediaInput {
  create: [UserCreateWithoutSeenMediaInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSeenMediaInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSeenMediaInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutSeenMessagesInput {
  create: [UserCreateWithoutSeenMessagesInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutSeenMessagesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutSeenMessagesInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithoutTaggedMessagesInput {
  create: [UserCreateWithoutTaggedMessagesInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutTaggedMessagesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutTaggedMessagesInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutCreatedChannelsInput {
  create: UserCreateWithoutCreatedChannelsInput
  update: UserUpdateWithoutCreatedChannelsDataInput
  upsert: UserUpsertWithoutCreatedChannelsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMediaInput {
  create: UserCreateWithoutMediaInput
  update: UserUpdateWithoutMediaDataInput
  upsert: UserUpsertWithoutMediaInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutMessagesInput {
  create: UserCreateWithoutMessagesInput
  update: UserUpdateWithoutMessagesDataInput
  upsert: UserUpsertWithoutMessagesInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutReactionsInput {
  create: UserCreateWithoutReactionsInput
  update: UserUpdateWithoutReactionsDataInput
  upsert: UserUpsertWithoutReactionsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutChannelsDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  messages: MessageUpdateManyWithoutCreatedByInput
  seenMessages: MessageUpdateManyWithoutSeenByInput
  receivedMessages: MessageUpdateManyInput
  seenMedia: MediaUpdateManyWithoutSeenByInput
  receivedMedia: MediaUpdateManyWithoutReceivedByInput
  media: MediaUpdateManyWithoutUploadedByInput
  createdChannels: ChannelUpdateManyWithoutCreatedByInput
  taggedMessages: MessageUpdateManyWithoutTaggedInput
  reactions: ReactionUpdateManyWithoutByInput
}

input UserUpdateWithoutCreatedChannelsDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutCreatedByInput
  seenMessages: MessageUpdateManyWithoutSeenByInput
  receivedMessages: MessageUpdateManyInput
  seenMedia: MediaUpdateManyWithoutSeenByInput
  receivedMedia: MediaUpdateManyWithoutReceivedByInput
  media: MediaUpdateManyWithoutUploadedByInput
  taggedMessages: MessageUpdateManyWithoutTaggedInput
  reactions: ReactionUpdateManyWithoutByInput
}

input UserUpdateWithoutDepartmentDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutCreatedByInput
  seenMessages: MessageUpdateManyWithoutSeenByInput
  receivedMessages: MessageUpdateManyInput
  seenMedia: MediaUpdateManyWithoutSeenByInput
  receivedMedia: MediaUpdateManyWithoutReceivedByInput
  media: MediaUpdateManyWithoutUploadedByInput
  createdChannels: ChannelUpdateManyWithoutCreatedByInput
  taggedMessages: MessageUpdateManyWithoutTaggedInput
  reactions: ReactionUpdateManyWithoutByInput
}

input UserUpdateWithoutMediaDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutCreatedByInput
  seenMessages: MessageUpdateManyWithoutSeenByInput
  receivedMessages: MessageUpdateManyInput
  seenMedia: MediaUpdateManyWithoutSeenByInput
  receivedMedia: MediaUpdateManyWithoutReceivedByInput
  createdChannels: ChannelUpdateManyWithoutCreatedByInput
  taggedMessages: MessageUpdateManyWithoutTaggedInput
  reactions: ReactionUpdateManyWithoutByInput
}

input UserUpdateWithoutMessagesDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
  seenMessages: MessageUpdateManyWithoutSeenByInput
  receivedMessages: MessageUpdateManyInput
  seenMedia: MediaUpdateManyWithoutSeenByInput
  receivedMedia: MediaUpdateManyWithoutReceivedByInput
  media: MediaUpdateManyWithoutUploadedByInput
  createdChannels: ChannelUpdateManyWithoutCreatedByInput
  taggedMessages: MessageUpdateManyWithoutTaggedInput
  reactions: ReactionUpdateManyWithoutByInput
}

input UserUpdateWithoutReactionsDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutCreatedByInput
  seenMessages: MessageUpdateManyWithoutSeenByInput
  receivedMessages: MessageUpdateManyInput
  seenMedia: MediaUpdateManyWithoutSeenByInput
  receivedMedia: MediaUpdateManyWithoutReceivedByInput
  media: MediaUpdateManyWithoutUploadedByInput
  createdChannels: ChannelUpdateManyWithoutCreatedByInput
  taggedMessages: MessageUpdateManyWithoutTaggedInput
}

input UserUpdateWithoutReceivedMediaDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutCreatedByInput
  seenMessages: MessageUpdateManyWithoutSeenByInput
  receivedMessages: MessageUpdateManyInput
  seenMedia: MediaUpdateManyWithoutSeenByInput
  media: MediaUpdateManyWithoutUploadedByInput
  createdChannels: ChannelUpdateManyWithoutCreatedByInput
  taggedMessages: MessageUpdateManyWithoutTaggedInput
  reactions: ReactionUpdateManyWithoutByInput
}

input UserUpdateWithoutSeenMediaDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutCreatedByInput
  seenMessages: MessageUpdateManyWithoutSeenByInput
  receivedMessages: MessageUpdateManyInput
  receivedMedia: MediaUpdateManyWithoutReceivedByInput
  media: MediaUpdateManyWithoutUploadedByInput
  createdChannels: ChannelUpdateManyWithoutCreatedByInput
  taggedMessages: MessageUpdateManyWithoutTaggedInput
  reactions: ReactionUpdateManyWithoutByInput
}

input UserUpdateWithoutSeenMessagesDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutCreatedByInput
  receivedMessages: MessageUpdateManyInput
  seenMedia: MediaUpdateManyWithoutSeenByInput
  receivedMedia: MediaUpdateManyWithoutReceivedByInput
  media: MediaUpdateManyWithoutUploadedByInput
  createdChannels: ChannelUpdateManyWithoutCreatedByInput
  taggedMessages: MessageUpdateManyWithoutTaggedInput
  reactions: ReactionUpdateManyWithoutByInput
}

input UserUpdateWithoutTaggedMessagesDataInput {
  name: String
  rollNumber: String
  email: String
  password: String
  mobile: String
  upi: String
  about: String
  profilePic: String
  coverPic: String
  role: AccessLevel
  department: DepartmentUpdateOneWithoutMembersInput
  channels: ChannelUpdateManyWithoutMembersInput
  messages: MessageUpdateManyWithoutCreatedByInput
  seenMessages: MessageUpdateManyWithoutSeenByInput
  receivedMessages: MessageUpdateManyInput
  seenMedia: MediaUpdateManyWithoutSeenByInput
  receivedMedia: MediaUpdateManyWithoutReceivedByInput
  media: MediaUpdateManyWithoutUploadedByInput
  createdChannels: ChannelUpdateManyWithoutCreatedByInput
  reactions: ReactionUpdateManyWithoutByInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutChannelsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutChannelsDataInput!
}

input UserUpdateWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutDepartmentDataInput!
}

input UserUpdateWithWhereUniqueWithoutReceivedMediaInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutReceivedMediaDataInput!
}

input UserUpdateWithWhereUniqueWithoutSeenMediaInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSeenMediaDataInput!
}

input UserUpdateWithWhereUniqueWithoutSeenMessagesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSeenMessagesDataInput!
}

input UserUpdateWithWhereUniqueWithoutTaggedMessagesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutTaggedMessagesDataInput!
}

input UserUpsertWithoutCreatedChannelsInput {
  update: UserUpdateWithoutCreatedChannelsDataInput!
  create: UserCreateWithoutCreatedChannelsInput!
}

input UserUpsertWithoutMediaInput {
  update: UserUpdateWithoutMediaDataInput!
  create: UserCreateWithoutMediaInput!
}

input UserUpsertWithoutMessagesInput {
  update: UserUpdateWithoutMessagesDataInput!
  create: UserCreateWithoutMessagesInput!
}

input UserUpsertWithoutReactionsInput {
  update: UserUpdateWithoutReactionsDataInput!
  create: UserCreateWithoutReactionsInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutChannelsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutChannelsDataInput!
  create: UserCreateWithoutChannelsInput!
}

input UserUpsertWithWhereUniqueWithoutDepartmentInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutDepartmentDataInput!
  create: UserCreateWithoutDepartmentInput!
}

input UserUpsertWithWhereUniqueWithoutReceivedMediaInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutReceivedMediaDataInput!
  create: UserCreateWithoutReceivedMediaInput!
}

input UserUpsertWithWhereUniqueWithoutSeenMediaInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSeenMediaDataInput!
  create: UserCreateWithoutSeenMediaInput!
}

input UserUpsertWithWhereUniqueWithoutSeenMessagesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSeenMessagesDataInput!
  create: UserCreateWithoutSeenMessagesInput!
}

input UserUpsertWithWhereUniqueWithoutTaggedMessagesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutTaggedMessagesDataInput!
  create: UserCreateWithoutTaggedMessagesInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  rollNumber: String
  rollNumber_not: String
  rollNumber_in: [String!]
  rollNumber_not_in: [String!]
  rollNumber_lt: String
  rollNumber_lte: String
  rollNumber_gt: String
  rollNumber_gte: String
  rollNumber_contains: String
  rollNumber_not_contains: String
  rollNumber_starts_with: String
  rollNumber_not_starts_with: String
  rollNumber_ends_with: String
  rollNumber_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  mobile: String
  mobile_not: String
  mobile_in: [String!]
  mobile_not_in: [String!]
  mobile_lt: String
  mobile_lte: String
  mobile_gt: String
  mobile_gte: String
  mobile_contains: String
  mobile_not_contains: String
  mobile_starts_with: String
  mobile_not_starts_with: String
  mobile_ends_with: String
  mobile_not_ends_with: String
  upi: String
  upi_not: String
  upi_in: [String!]
  upi_not_in: [String!]
  upi_lt: String
  upi_lte: String
  upi_gt: String
  upi_gte: String
  upi_contains: String
  upi_not_contains: String
  upi_starts_with: String
  upi_not_starts_with: String
  upi_ends_with: String
  upi_not_ends_with: String
  about: String
  about_not: String
  about_in: [String!]
  about_not_in: [String!]
  about_lt: String
  about_lte: String
  about_gt: String
  about_gte: String
  about_contains: String
  about_not_contains: String
  about_starts_with: String
  about_not_starts_with: String
  about_ends_with: String
  about_not_ends_with: String
  profilePic: String
  profilePic_not: String
  profilePic_in: [String!]
  profilePic_not_in: [String!]
  profilePic_lt: String
  profilePic_lte: String
  profilePic_gt: String
  profilePic_gte: String
  profilePic_contains: String
  profilePic_not_contains: String
  profilePic_starts_with: String
  profilePic_not_starts_with: String
  profilePic_ends_with: String
  profilePic_not_ends_with: String
  coverPic: String
  coverPic_not: String
  coverPic_in: [String!]
  coverPic_not_in: [String!]
  coverPic_lt: String
  coverPic_lte: String
  coverPic_gt: String
  coverPic_gte: String
  coverPic_contains: String
  coverPic_not_contains: String
  coverPic_starts_with: String
  coverPic_not_starts_with: String
  coverPic_ends_with: String
  coverPic_not_ends_with: String
  role: AccessLevel
  role_not: AccessLevel
  role_in: [AccessLevel!]
  role_not_in: [AccessLevel!]
  department: DepartmentWhereInput
  channels_every: ChannelWhereInput
  channels_some: ChannelWhereInput
  channels_none: ChannelWhereInput
  messages_every: MessageWhereInput
  messages_some: MessageWhereInput
  messages_none: MessageWhereInput
  seenMessages_every: MessageWhereInput
  seenMessages_some: MessageWhereInput
  seenMessages_none: MessageWhereInput
  receivedMessages_every: MessageWhereInput
  receivedMessages_some: MessageWhereInput
  receivedMessages_none: MessageWhereInput
  seenMedia_every: MediaWhereInput
  seenMedia_some: MediaWhereInput
  seenMedia_none: MediaWhereInput
  receivedMedia_every: MediaWhereInput
  receivedMedia_some: MediaWhereInput
  receivedMedia_none: MediaWhereInput
  media_every: MediaWhereInput
  media_some: MediaWhereInput
  media_none: MediaWhereInput
  createdChannels_every: ChannelWhereInput
  createdChannels_some: ChannelWhereInput
  createdChannels_none: ChannelWhereInput
  taggedMessages_every: MessageWhereInput
  taggedMessages_some: MessageWhereInput
  taggedMessages_none: MessageWhereInput
  reactions_every: ReactionWhereInput
  reactions_some: ReactionWhereInput
  reactions_none: ReactionWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  rollNumber: String
  email: String
  mobile: String
}
`