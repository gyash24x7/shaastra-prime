datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Department {
  id                String    @default(cuid()) @id
  name              String
  shortName         String    @default("")
  subDepartments    Team[]    @relation("DeptTeams")
  members           User[]    @relation("DepartmentMembers")
  tasksAssigned     Task[]    @relation("TasksForDept")
  tasksCreated      Task[]    @relation("TasksByDept")
  updates           Update[]  @relation("DeptUpdates")
  invoicesSubmitted Invoice[] @relation("InvoicesByDept")
}

model Team {
  id         String     @default(cuid()) @id
  name       String
  members    User[]     @relation("TeamMembers", references: [id])
  department Department @relation("DeptTeams", fields: [deptId], references: [id])
  deptId     String
}

model User {
  id                String     @default(cuid()) @id
  name              String
  email             String     @unique
  password          String
  rollNumber        String
  profilePic        String
  coverPic          String
  mobile            String
  upi               String
  about             String
  role              UserRole   @default(COORD)
  verified          Boolean    @default(false)
  verificationOTP   String
  passwordOTP       String?
  department        Department @relation("DepartmentMembers", fields: [departmentId], references: [id])
  departmentId      String
  channels          Channel[]  @relation("ChannelMembers", references: [id])
  channelsCreated   Channel[]  @relation("ChannelsByUser")
  messages          Message[]  @relation("MessagesByUser")
  media             Media[]    @relation("MediaByUser")
  tasksCreated      Task[]     @relation("TasksByUser")
  tasksAssigned     Task[]     @relation("TasksForUser", references: [id])
  teams             Team[]     @relation("TeamMembers", references: [id])
  invoicesSubmitted Invoice[]  @relation("InvoicesByUser")
}

model Channel {
  id          String    @default(cuid()) @id
  name        String
  description String
  createdAt   DateTime  @default(now())
  archived    Boolean   @default(false)
  messages    Message[] @relation("ChannelMessages")
  createdBy   User      @relation("ChannelsByUser", fields: [createdById], references: [id])
  members     User[]    @relation("ChannelMembers", references: [id])
  media       Media[]   @relation("ChannelMedia")
  task        Task?     @relation("ChannelTask")
  createdById String
  taskId      String?
}

model Message {
  id          String     @default(cuid()) @id
  content     String
  createdAt   DateTime   @default(now())
  createdBy   User       @relation("MessagesByUser", fields: [createdById], references: [id])
  channel     Channel    @relation("ChannelMessages", fields: [channelId], references: [id])
  starred     Boolean    @default(false)
  reactions   Reaction[] @relation("MessageReactions")
  createdById String
  channelId   String
}

model Media {
  id           String    @default(cuid()) @id
  url          String
  type         MediaType
  uploadedBy   User      @relation("MediaByUser", fields: [uploadedById], references: [id])
  task         Task?     @relation("TaskMedia", fields: [taskId], references: [id])
  taskId       String?
  channel      Channel?  @relation("ChannelMedia", fields: [channelId], references: [id])
  uploadedById String
  channelId    String?
}

model Reaction {
  id        String       @default(cuid()) @id
  type      ReactionType
  by        User         @relation("UserReactions", fields: [byId], references: [id])
  message   Message      @relation("MessageReactions", fields: [messageId], references: [id])
  byId      String
  messageId String
}

model Task {
  id          String     @default(cuid()) @id
  brief       String
  details     String
  byDept      Department @relation("TasksByDept", fields: [byDeptId], references: [id])
  forDept     Department @relation("TasksForDept", fields: [forDeptId], references: [id])
  createdBy   User       @relation("TasksByUser", fields: [createdById], references: [id])
  assignedTo  User[]     @relation("TasksForUser", references: [id])
  status      TaskStatus @default(NOT_ASSIGNED)
  createdAt   DateTime   @default(now())
  deadline    DateTime
  channel     Channel    @relation("ChannelTask", fields: [channelId], references: [id])
  media       Media[]    @relation("TaskMedia")
  subTasks    SubTask[]  @relation("SubTasksForTask")
  byDeptId    String
  forDeptId   String
  createdById String
  channelId   String
}

model SubTask {
  id         String        @default(cuid()) @id
  title      String
  status     SubTaskStatus @default(NOT_STARTED)
  task       Task          @relation("SubTasksForTask", fields: [taskId], references: [id])
  taskId     String
  isTemplate Boolean       @default(false)
}

model Update {
  id         String     @default(cuid()) @id
  brief      String
  subject    String
  content    String
  byDept     Department @relation("DeptUpdates", fields: [byDeptId], references: [id])
  postedBy   User       @relation("UserUpdate", fields: [postedById], references: [id])
  createdAt  DateTime   @default(now())
  postedById String
  byDeptId   String
}

model Goal {
  id         String      @default(cuid()) @id
  title      String
  dept       Department  @relation("DeptGoals", fields: [deptId], references: [id])
  deptId     String
  type       GoalType
  createdAt  DateTime    @default(now())
  milestones Milestone[] @relation("GoalMilestones")
}

model Milestone {
  id     String          @default(cuid()) @id
  title  String
  status MilestoneStatus @default(IN_PROGRESS)
  goal   Goal            @relation("GoalMilestones", fields: [goalId], references: [id])
  goalId String
}

// Kaousheik & Vatsal Start from here
model Invoice {
  id            String            @default(cuid()) @id
  title         String
  date          DateTime
  invoiceNumber String
  amount        String
  purpose       String
  status        InvoiceStatus
  type          InvoiceType
  vendor        Vendor            @relation("VendorInvoices", fields: [vendorId], references: [id])
  vendorId      String
  media         Media             @relation("InvoiceMedia", fields: [mediaId], references: [id])
  mediaId       String
  activity      InvoiceActivity[] @relation("InvoiceActivity")
  uploadedBy    User              @relation("InvoicesByUser", fields: [uploadedById], references: [id])
  uploadedById  String
  byDept        Department        @relation("InvoicesByDept", fields: [byDeptId], references: [id])
  byDeptId      String
}

model InvoiceActivity {
  id        String              @default(cuid()) @id
  type      InvoiceActivityType
  on        DateTime            @default(now())
  invoice   Invoice             @relation("InvoiceActivity", fields: [invoiceId], references: [id])
  invoiceId String
}

model Vendor {
  id            String    @default(cuid()) @id
  name          String
  gstNumber     String
  accountName   String
  accountNumber String
  ifsc          String
  bankDetails   String
  invoices      Invoice[] @relation("VendorInvoices")
}

model Vertical {
  id          String   @default(cuid()) @id
  name        String
  info        String
  image       Media    @relation("VerticalImage", fields: [imageId], references: [id])
  imageId     String
  rank        Int      @default(autoincrement())
  updatedBy   User     @relation("VerticalUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedOn   DateTime @default(now())
  events      Event[]  @relation("EventsUnderVertical")
}

model Event {
  id               String           @default(cuid()) @id
  name             String
  rank             Int              @default(autoincrement())
  vertical         Vertical         @relation("EventsUnderVertical", fields: [verticalId], references: [id])
  verticalId       String
  info             String
  eventTabs        EventTab[]       @relation("TabsForEvent")
  updatedBy        User             @relation("EventUpdatedBy", fields: [updatedById], references: [id])
  updatedById      String
  image            Media            @relation("EventImage", fields: [imageId], references: [id])
  imageId          String
  approved         Boolean          @default(false)
  paid             Boolean          @default(false)
  registrationType RegistrationType
  registrations    Registration[]   @relation("EventRegistration")
}

model EventTab {
  id      String @default(cuid()) @id
  title   String
  content String
  event   Event  @relation("TabsForEvent", fields: [eventId], references: [id])
  eventId String
}

model Participant {
  id            String           @default(cuid()) @id
  name          String
  shaastrID     String           @default(autoincrement()) @unique
  shaastraQR    String
  email         String           @unique
  password      String
  mobile        String
  gender        String
  college       String
  city          String
  state         String
  invitations   TeamInvitation[] @relation("InvitationForParticipant")
  registrations Registration[]   @relation("IndividualRegistration")
}

model TeamInvitation {
  id          String       @default(cuid()) @id
  status      InviteStatus @default(NO_RESPONSE)
  team        PTeam        @relation("InvitationForTeam", fields: [pTeamId], references: [id])
  pTeamId     String
  participant Participant  @relation("InvitationForParticipant", fields: [pId], references: [id])
  pId         String
}

model PTeam {
  id            String           @default(cuid()) @id
  name          String
  invitations   TeamInvitation[] @relation("InvitationForTeam")
  registrations Registration[]   @relation("TeamRegistration")
}

model Registration {
  id          String           @default(cuid()) @id
  type        RegistrationType
  team        PTeam?           @relation("TeamRegistration", fields: [pTeamId], references: [id])
  pTeamId     String?
  participant Participant?     @relation("IndividualRegistration", fields: [pId], references: [id])
  pId         String?
  event       Event            @relation("EventRegistration", fields: [eventId], references: [id])
  eventId     String
}

enum RegistrationType {
  INDIVIDUAL
  TEAM
  BOTH
}

enum InviteStatus {
  ACCEPTED
  REJECTED
  NO_RESPONSE
}

enum MilestoneStatus {
  IN_PROGRESS
  ACHIEVED
}

enum GoalType {
  WEEKLY
  BI_WEEKLY
  MONTHLY
  END_GOAL
}

enum SubTaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum InvoiceActivityType {
  UPLOADED
  EDITED
  APPROVED
  REJECTED
}

enum InvoiceType {
  REIMBURSEMENT
  SETTLEMENT
  DIRECT_PAYMENT
}

enum InvoiceStatus {
  COORD
  HEAD
  CORE
  FIN_MANAGER
  FIN_CORE
  COCAD
}

enum TaskStatus {
  NOT_ASSIGNED
  ASSIGNED
  IN_PROGRESS
  SUBMITTED
  COMPLETED
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  ANGER
  SAD
}

enum MediaType {
  IMAGE
  AUDIO
  VIDEO
  DOC
  CODE
}

enum UserRole {
  COORD
  HEAD
  CORE
  COCAS
  COCAD
}
