datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Department {
  id             Int      @default(autoincrement()) @id
  name           String
  subDepartments String[]
  members        User[]   @relation("DepartmentMembers", references: [id])
  tasksAssigned  Task[]   @relation("TasksForDept")
  tasksCreated   Task[]   @relation("TasksByDept")
  updates        Update[] @relation("DeptUpdates")
}

model User {
  id              Int          @default(autoincrement()) @id
  name            String
  email           String       @unique
  password        String
  rollNumber      String       @unique
  profilePic      String
  coverPic        String
  mobile          String
  upi             String
  about           String
  role            UserRole     @default(COORD)
  verified        Boolean      @default(false)
  verificationOTP String
  passwordOTP     String?
  departments     Department[] @relation("DepartmentMembers", references: [id])
  channels        Channel[]    @relation("ChannelMembers", references: [id])
  channelsCreated Channel[]    @relation("ChannelsByUser")
  messages        Message[]    @relation("MessagesByUser")
  media           Media[]      @relation("MediaByUser")
  tasksCreated    Task[]       @relation("TasksByUser")
  tasksAssigned   Task[]       @relation("TasksForUser", references: [id])
}

model Channel {
  id          Int       @default(autoincrement()) @id
  name        String
  description String
  createdAt   DateTime  @default(now())
  archived    Boolean   @default(false)
  messages    Message[] @relation("ChannelMessages")
  createdBy   User      @relation("ChannelsByUser", fields: [createdById], references: [id])
  members     User[]    @relation("ChannelMembers", references: [id])
  media       Media[]   @relation("ChannelMedia")
  task        Task?     @relation("ChannelTask")
  createdById Int
  taskId      Int?
}

model Message {
  id          Int        @default(autoincrement()) @id
  content     String
  createdAt   DateTime   @default(now())
  createdBy   User       @relation("MessagesByUser", fields: [createdById], references: [id])
  channel     Channel    @relation("ChannelMessages", fields: [channelId], references: [id])
  starred     Boolean    @default(false)
  reactions   Reaction[] @relation("MessageReactions")
  createdById Int
  channelId   Int
}

model Media {
  id           Int       @default(autoincrement()) @id
  url          String
  type         MediaType
  uploadedBy   User      @relation("MediaByUser", fields: [uploadedById], references: [id])
  task         Task?     @relation("TaskMedia", fields: [taskId], references: [id])
  taskId       Int?
  channel      Channel?  @relation("ChannelMedia", fields: [channelId], references: [id])
  uploadedById Int
  channelId    Int?
}

model Reaction {
  id        Int          @default(autoincrement()) @id
  type      ReactionType
  by        User         @relation("UserReactions", fields: [byId], references: [id])
  message   Message      @relation("MessageReactions", fields: [messageId], references: [id])
  byId      Int
  messageId Int
}

model Task {
  id          Int        @default(autoincrement()) @id
  brief       String
  details     String
  byDept      Department @relation("TasksByDept", fields: [byDeptId], references: [id])
  forDept     Department @relation("TasksForDept", fields: [forDeptId], references: [id])
  createdBy   User       @relation("TasksByUser", fields: [createdById], references: [id])
  assignedTo  User[]     @relation("TasksForUser", references: [id])
  status      TaskStatus @default(NOT_ASSIGNED)
  createdAt   DateTime   @default(now())
  deadline    DateTime
  channel     Channel    @relation("ChannelTask", fields: [channelId], references: [id])
  media       Media[]    @relation("TaskMedia")
  byDeptId    Int
  forDeptId   Int
  createdById Int
  channelId   Int
}

model Update {
  id           Int        @default(autoincrement()) @id
  subject      String
  content      String
  byDept       Department @relation("DepartmentUpdates", fields: [byDeptId], references: [id])
  postedBy     User       @relation("UserUpdate", fields: [postedById], references: [id])
  createdAt    DateTime   @default(now())
  postedById   Int
  byDeptId     Int
}

enum TaskStatus {
  NOT_ASSIGNED
  ASSIGNED
  IN_PROGRESS
  SUBMITTED
  COMPLETED
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  ANGER
  SAD
}

enum MediaType {
  IMAGE
  AUDIO
  VIDEO
  DOC
  CODE
}

enum UserRole {
  COORD
  HEAD
  CORE
  COCAS
  COCAD
}
