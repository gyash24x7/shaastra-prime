datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model Department {
  id                String    @default(cuid()) @id
  name              String
  shortName         String    @default("")
  subDepartments    String[]
  finManager        User?     @relation("FinManagerForDept", fields: [finManagerId], references: [id])
  finManagerId      String?
  members           User[]    @relation("DeptMembers")
  tasksAssigned     Task[]    @relation("TasksForDept")
  tasksCreated      Task[]    @relation("TasksByDept")
  updates           Update[]  @relation("DeptUpdates")
  invoicesSubmitted Invoice[] @relation("InvoicesByDept")
  goals             Goal[]    @relation("DeptGoals")
}

model User {
  id                String            @default(cuid()) @id
  name              String
  email             String            @unique
  password          String
  rollNumber        String
  profilePic        String
  coverPic          String
  mobile            String
  upi               String
  about             String
  role              UserRole          @default(COORD)
  verified          Boolean           @default(false)
  verificationOTP   String
  passwordOTP       String?
  department        Department        @relation("DeptMembers", fields: [deptId], references: [id])
  deptId            String
  // Fields to be fetched separately if needed: Omit in API
  channels          Channel[]         @relation("ChannelMembers", references: [id])
  media             Media[]           @relation("MediaByUser")
  tasksAssigned     Task[]            @relation("TasksForUser", references: [id])
  invoicesSubmitted Invoice[]         @relation("InvoicesByUser")
  messages          Message[]         @relation("MessagesByUser")
  channelsCreated   Channel[]         @relation("ChannelsByUser")
  tasksCreated      Task[]            @relation("TasksByUser")
  likedMessages     Message[]         @relation("LikesByUser", references: [id])
  Update            Update[]          @relation("UserUpdate")
  Vertical          Vertical[]        @relation("VerticalUpdatedBy")
  Event             Event[]           @relation("EventUpdatedBy")
  TaskActivity      TaskActivity[]    @relation("TaskActivityByUser")
  InvoiceActivity   InvoiceActivity[] @relation("InvoiceActivityByUser")
  Department        Department?       @relation("FinManagerForDept")
}

model Channel {
  id                String      @default(cuid()) @id
  name              String      @unique
  description       String
  type              ChannelType
  createdAt         DateTime    @default(now())
  archived          Boolean     @default(false)
  createdBy         User        @relation("ChannelsByUser", fields: [createdById], references: [id])
  members           User[]      @relation("ChannelMembers", references: [id])
  createdById       String
  // Fields to be fetched separately if needed: Omit in API
  messages          Message[]   @relation("ChannelMessages")
  connectedTasks    Task[]      @relation("TaskUpdateChannels", references: [id])
  connectedInvoices Invoice[]   @relation("InvoiceUpdateChannels", references: [id])
}

model Message {
  id          String      @default(cuid()) @id
  content     String
  createdAt   DateTime    @default(now())
  createdBy   User        @relation("MessagesByUser", fields: [createdById], references: [id])
  starred     Boolean     @default(false)
  likedBy     User[]      @relation("LikesByUser", references: [id])
  createdById String
  type        MessageType
  media       Media[]     @relation("MessageMedia")
  // Omit in API
  channel     Channel     @relation("ChannelMessages", fields: [channelId], references: [id])
  channelId   String
}

model Media {
  id           String    @default(cuid()) @id
  url          String
  type         MediaType
  uploadedBy   User      @relation("MediaByUser", fields: [uploadedById], references: [id])
  uploadedById String
  // Fields to be fetched separately if needed: Omit in API
  invoice      Invoice?  @relation("InvoiceMedia", fields: [invoiceId], references: [id])
  invoiceId    String?
  vertical     Vertical? @relation("VerticalImage")
  task         Task?     @relation("TaskMedia", fields: [taskId], references: [id])
  taskId       String?
  event        Event?    @relation("EventImage")
  message      Message?  @relation("MessageMedia", fields: [messageId], references: [id])
  messageId    String?
}

model Task {
  id          String         @default(cuid()) @id
  brief       String
  details     String
  byDept      Department     @relation("TasksByDept", fields: [byDeptId], references: [id])
  forDept     Department     @relation("TasksForDept", fields: [forDeptId], references: [id])
  createdBy   User           @relation("TasksByUser", fields: [createdById], references: [id])
  assignedTo  User[]         @relation("TasksForUser", references: [id])
  status      TaskStatus     @default(NOT_ASSIGNED)
  createdAt   DateTime       @default(now())
  deadline    DateTime
  media       Media[]        @relation("TaskMedia")
  byDeptId    String
  forDeptId   String
  createdById String
  activity    TaskActivity[] @relation("TaskActivity")
  channels    Channel[]      @relation("TaskUpdateChannels", references: [id])
  deleted     Boolean        @default(false)
}

model TaskActivity {
  id          String           @default(cuid()) @id
  task        Task             @relation("TaskActivity", fields: [taskId], references: [id])
  taskId      String
  type        TaskActivityType
  on          DateTime         @default(now())
  by          User             @relation("TaskActivityByUser", fields: [byId], references: [id])
  byId        String
  description String
}

model Update {
  id         String     @default(cuid()) @id
  brief      String
  subject    String
  content    String
  byDept     Department @relation("DeptUpdates", fields: [byDeptId], references: [id])
  postedBy   User       @relation("UserUpdate", fields: [postedById], references: [id])
  createdAt  DateTime   @default(now())
  postedById String
  byDeptId   String
}

model Goal {
  id          String      @default(cuid()) @id
  title       String
  dept        Department  @relation("DeptGoals", fields: [deptId], references: [id])
  deptId      String
  description String
  type        GoalType
  createdAt   DateTime    @default(now())
  milestones  Milestone[] @relation("GoalMilestones")
}

model Milestone {
  id     String          @default(cuid()) @id
  title  String
  status MilestoneStatus @default(IN_PROGRESS)
  goal   Goal            @relation("GoalMilestones", fields: [goalId], references: [id])
  goalId String
}

// Kaousheik & Vatsal Start from here
model Invoice {
  id            String            @default(cuid()) @id
  title         String
  date          DateTime
  invoiceNumber String
  amount        String
  purpose       String
  status        InvoiceStatus
  createdAt     DateTime          @default(now())
  type          InvoiceType
  vendor        Vendor            @relation("VendorInvoices", fields: [vendorId], references: [id])
  vendorId      String
  media         Media[]           @relation("InvoiceMedia")
  activity      InvoiceActivity[] @relation("InvoiceActivity")
  uploadedBy    User              @relation("InvoicesByUser", fields: [uploadedById], references: [id])
  uploadedById  String
  byDept        Department        @relation("InvoicesByDept", fields: [byDeptId], references: [id])
  byDeptId      String
  channels      Channel[]         @relation("InvoiceUpdateChannels", references: [id])
}

model InvoiceActivity {
  id          String              @default(cuid()) @id
  type        InvoiceActivityType
  on          DateTime            @default(now())
  invoice     Invoice             @relation("InvoiceActivity", fields: [invoiceId], references: [id])
  invoiceId   String
  by          User                @relation("InvoiceActivityByUser", fields: [byId], references: [id])
  byId        String
  description String
}

model Vendor {
  id            String    @default(cuid()) @id
  name          String
  gstNumber     String
  accountName   String?
  accountNumber String?
  ifsc          String?
  bankDetails   String?
  invoices      Invoice[] @relation("VendorInvoices")
}

model Vertical {
  id          String   @default(cuid()) @id
  name        String
  info        String
  image       Media    @relation("VerticalImage", fields: [imageId], references: [id])
  imageId     String
  rank        Int      @default(autoincrement())
  updatedBy   User     @relation("VerticalUpdatedBy", fields: [updatedById], references: [id])
  updatedById String
  updatedOn   DateTime @default(now())
  events      Event[]  @relation("EventsUnderVertical")
}

model Event {
  id               String           @default(cuid()) @id
  name             String
  rank             Int              @default(autoincrement())
  vertical         Vertical         @relation("EventsUnderVertical", fields: [verticalId], references: [id])
  verticalId       String
  info             String
  updatedOn        DateTime         @default(now())
  eventTabs        EventTab[]       @relation("TabsForEvent")
  updatedBy        User             @relation("EventUpdatedBy", fields: [updatedById], references: [id])
  updatedById      String
  image            Media            @relation("EventImage", fields: [imageId], references: [id])
  imageId          String
  approved         Boolean          @default(false)
  paid             Boolean          @default(false)
  registrationType RegistrationType
  registrations    Registration[]   @relation("EventRegistration")
}

model EventTab {
  id      String @default(cuid()) @id
  title   String
  content String
  event   Event  @relation("TabsForEvent", fields: [eventId], references: [id])
  eventId String
}

model Participant {
  id            String           @default(cuid()) @id
  name          String
  shaastrID     String           @default(autoincrement()) @unique
  shaastraQR    String
  email         String           @unique
  password      String
  mobile        String
  gender        String
  college       String
  city          String
  state         String
  invitations   TeamInvitation[] @relation("InvitationForParticipant")
  registrations Registration[]   @relation("IndividualRegistration")
}

model TeamInvitation {
  id          String       @default(cuid()) @id
  status      InviteStatus @default(NO_RESPONSE)
  team        Team         @relation("InvitationForTeam", fields: [teamId], references: [id])
  teamId      String
  participant Participant  @relation("InvitationForParticipant", fields: [pId], references: [id])
  pId         String
}

model Team {
  id            String           @default(cuid()) @id
  name          String
  invitations   TeamInvitation[] @relation("InvitationForTeam")
  registrations Registration[]   @relation("TeamRegistration")
}

model Registration {
  id          String           @default(cuid()) @id
  type        RegistrationType
  team        Team?            @relation("TeamRegistration", fields: [teamId], references: [id])
  teamId      String?
  participant Participant?     @relation("IndividualRegistration", fields: [pId], references: [id])
  pId         String?
  event       Event            @relation("EventRegistration", fields: [eventId], references: [id])
  eventId     String
}

enum MessageType {
  SYSTEM
  TEXT
  MEDIA
  TASK_UPDATE
  INVOICE_UPDATE
}

enum RegistrationType {
  INDIVIDUAL
  TEAM
  BOTH
}

enum ChannelType {
  GROUP
  DIRECT
}

enum TaskActivityType {
  CREATED
  ASSIGNED
  IN_PROGRESS
  SUBMITTED
  COMPLETED
  CONNECT_CHANNEL
  ATTACH_MEDIA
}

enum InviteStatus {
  ACCEPTED
  REJECTED
  NO_RESPONSE
}

enum MilestoneStatus {
  IN_PROGRESS
  ACHIEVED
}

enum GoalType {
  WEEKLY
  BI_WEEKLY
  MONTHLY
  END_GOAL
}

enum SubTaskStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum InvoiceActivityType {
  UPLOADED
  EDITED
  APPROVED
  REJECTED
  CONNECT_CHANNEL
  ATTACH_MEDIA
}

enum InvoiceType {
  REIMBURSEMENT
  SETTLEMENT
  DIRECT_PAYMENT
}

enum InvoiceStatus {
  COORD
  HEAD
  CORE
  FIN_MANAGER
  FIN_CORE
  COCAD
  REJECTED
}

enum TaskStatus {
  NOT_ASSIGNED
  ASSIGNED
  IN_PROGRESS
  SUBMITTED
  COMPLETED
}

enum ReactionType {
  LIKE
  LOVE
  HAHA
  ANGER
  SAD
}

enum MediaType {
  IMAGE
  AUDIO
  VIDEO
  DOC
}

enum UserRole {
  COORD
  HEAD
  CORE
  COCAS
  COCAD
}
